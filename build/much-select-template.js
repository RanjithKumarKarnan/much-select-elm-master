const getMuchSelectTemplate = (styleTag) => {
  const templateTag = document.createElement("template");
  templateTag.innerHTML = `
    <div>
      ${styleTag}
      <slot name="select-input"></slot>
      <div id="mount-node"></div>
      <script id="filter-worker" type="javascript/worker">
        (function(scope){\n'use strict';\n\nfunction F(arity, fun, wrapper) {\n  wrapper.a = arity;\n  wrapper.f = fun;\n  return wrapper;\n}\n\nfunction F2(fun) {\n  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })\n}\nfunction F3(fun) {\n  return F(3, fun, function(a) {\n    return function(b) { return function(c) { return fun(a, b, c); }; };\n  });\n}\nfunction F4(fun) {\n  return F(4, fun, function(a) { return function(b) { return function(c) {\n    return function(d) { return fun(a, b, c, d); }; }; };\n  });\n}\nfunction F5(fun) {\n  return F(5, fun, function(a) { return function(b) { return function(c) {\n    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };\n  });\n}\nfunction F6(fun) {\n  return F(6, fun, function(a) { return function(b) { return function(c) {\n    return function(d) { return function(e) { return function(f) {\n    return fun(a, b, c, d, e, f); }; }; }; }; };\n  });\n}\nfunction F7(fun) {\n  return F(7, fun, function(a) { return function(b) { return function(c) {\n    return function(d) { return function(e) { return function(f) {\n    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };\n  });\n}\nfunction F8(fun) {\n  return F(8, fun, function(a) { return function(b) { return function(c) {\n    return function(d) { return function(e) { return function(f) {\n    return function(g) { return function(h) {\n    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };\n  });\n}\nfunction F9(fun) {\n  return F(9, fun, function(a) { return function(b) { return function(c) {\n    return function(d) { return function(e) { return function(f) {\n    return function(g) { return function(h) { return function(i) {\n    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };\n  });\n}\n\nfunction A2(fun, a, b) {\n  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);\n}\nfunction A3(fun, a, b, c) {\n  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);\n}\nfunction A4(fun, a, b, c, d) {\n  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);\n}\nfunction A5(fun, a, b, c, d, e) {\n  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);\n}\nfunction A6(fun, a, b, c, d, e, f) {\n  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);\n}\nfunction A7(fun, a, b, c, d, e, f, g) {\n  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);\n}\nfunction A8(fun, a, b, c, d, e, f, g, h) {\n  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);\n}\nfunction A9(fun, a, b, c, d, e, f, g, h, i) {\n  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);\n}\n\nconsole.warn('Compiled in DEV mode. Follow the advice at https://elm-lang.org/0.19.1/optimize for better performance and smaller assets.');\n\n\nvar _JsArray_empty = [];\n\nfunction _JsArray_singleton(value)\n{\n    return [value];\n}\n\nfunction _JsArray_length(array)\n{\n    return array.length;\n}\n\nvar _JsArray_initialize = F3(function(size, offset, func)\n{\n    var result = new Array(size);\n\n    for (var i = 0; i < size; i++)\n    {\n        result[i] = func(offset + i);\n    }\n\n    return result;\n});\n\nvar _JsArray_initializeFromList = F2(function (max, ls)\n{\n    var result = new Array(max);\n\n    for (var i = 0; i < max && ls.b; i++)\n    {\n        result[i] = ls.a;\n        ls = ls.b;\n    }\n\n    result.length = i;\n    return _Utils_Tuple2(result, ls);\n});\n\nvar _JsArray_unsafeGet = F2(function(index, array)\n{\n    return array[index];\n});\n\nvar _JsArray_unsafeSet = F3(function(index, value, array)\n{\n    var length = array.length;\n    var result = new Array(length);\n\n    for (var i = 0; i < length; i++)\n    {\n        result[i] = array[i];\n    }\n\n    result[index] = value;\n    return result;\n});\n\nvar _JsArray_push = F2(function(value, array)\n{\n    var length = array.length;\n    var result = new Array(length + 1);\n\n    for (var i = 0; i < length; i++)\n    {\n        result[i] = array[i];\n    }\n\n    result[length] = value;\n    return result;\n});\n\nvar _JsArray_foldl = F3(function(func, acc, array)\n{\n    var length = array.length;\n\n    for (var i = 0; i < length; i++)\n    {\n        acc = A2(func, array[i], acc);\n    }\n\n    return acc;\n});\n\nvar _JsArray_foldr = F3(function(func, acc, array)\n{\n    for (var i = array.length - 1; i >= 0; i--)\n    {\n        acc = A2(func, array[i], acc);\n    }\n\n    return acc;\n});\n\nvar _JsArray_map = F2(function(func, array)\n{\n    var length = array.length;\n    var result = new Array(length);\n\n    for (var i = 0; i < length; i++)\n    {\n        result[i] = func(array[i]);\n    }\n\n    return result;\n});\n\nvar _JsArray_indexedMap = F3(function(func, offset, array)\n{\n    var length = array.length;\n    var result = new Array(length);\n\n    for (var i = 0; i < length; i++)\n    {\n        result[i] = A2(func, offset + i, array[i]);\n    }\n\n    return result;\n});\n\nvar _JsArray_slice = F3(function(from, to, array)\n{\n    return array.slice(from, to);\n});\n\nvar _JsArray_appendN = F3(function(n, dest, source)\n{\n    var destLen = dest.length;\n    var itemsToCopy = n - destLen;\n\n    if (itemsToCopy > source.length)\n    {\n        itemsToCopy = source.length;\n    }\n\n    var size = destLen + itemsToCopy;\n    var result = new Array(size);\n\n    for (var i = 0; i < destLen; i++)\n    {\n        result[i] = dest[i];\n    }\n\n    for (var i = 0; i < itemsToCopy; i++)\n    {\n        result[i + destLen] = source[i];\n    }\n\n    return result;\n});\n\n\n\n// LOG\n\nvar _Debug_log_UNUSED = F2(function(tag, value)\n{\n\treturn value;\n});\n\nvar _Debug_log = F2(function(tag, value)\n{\n\tconsole.log(tag + ': ' + _Debug_toString(value));\n\treturn value;\n});\n\n\n// TODOS\n\nfunction _Debug_todo(moduleName, region)\n{\n\treturn function(message) {\n\t\t_Debug_crash(8, moduleName, region, message);\n\t};\n}\n\nfunction _Debug_todoCase(moduleName, region, value)\n{\n\treturn function(message) {\n\t\t_Debug_crash(9, moduleName, region, value, message);\n\t};\n}\n\n\n// TO STRING\n\nfunction _Debug_toString_UNUSED(value)\n{\n\treturn '<internals>';\n}\n\nfunction _Debug_toString(value)\n{\n\treturn _Debug_toAnsiString(false, value);\n}\n\nfunction _Debug_toAnsiString(ansi, value)\n{\n\tif (typeof value === 'function')\n\t{\n\t\treturn _Debug_internalColor(ansi, '<function>');\n\t}\n\n\tif (typeof value === 'boolean')\n\t{\n\t\treturn _Debug_ctorColor(ansi, value ? 'True' : 'False');\n\t}\n\n\tif (typeof value === 'number')\n\t{\n\t\treturn _Debug_numberColor(ansi, value + '');\n\t}\n\n\tif (value instanceof String)\n\t{\n\t\treturn _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");\n\t}\n\n\tif (typeof value === 'string')\n\t{\n\t\treturn _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');\n\t}\n\n\tif (typeof value === 'object' && '$' in value)\n\t{\n\t\tvar tag = value.$;\n\n\t\tif (typeof tag === 'number')\n\t\t{\n\t\t\treturn _Debug_internalColor(ansi, '<internals>');\n\t\t}\n\n\t\tif (tag[0] === '#')\n\t\t{\n\t\t\tvar output = [];\n\t\t\tfor (var k in value)\n\t\t\t{\n\t\t\t\tif (k === '$') continue;\n\t\t\t\toutput.push(_Debug_toAnsiString(ansi, value[k]));\n\t\t\t}\n\t\t\treturn '(' + output.join(',') + ')';\n\t\t}\n\n\t\tif (tag === 'Set_elm_builtin')\n\t\t{\n\t\t\treturn _Debug_ctorColor(ansi, 'Set')\n\t\t\t\t+ _Debug_fadeColor(ansi, '.fromList') + ' '\n\t\t\t\t+ _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));\n\t\t}\n\n\t\tif (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')\n\t\t{\n\t\t\treturn _Debug_ctorColor(ansi, 'Dict')\n\t\t\t\t+ _Debug_fadeColor(ansi, '.fromList') + ' '\n\t\t\t\t+ _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));\n\t\t}\n\n\t\tif (tag === 'Array_elm_builtin')\n\t\t{\n\t\t\treturn _Debug_ctorColor(ansi, 'Array')\n\t\t\t\t+ _Debug_fadeColor(ansi, '.fromList') + ' '\n\t\t\t\t+ _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));\n\t\t}\n\n\t\tif (tag === '::' || tag === '[]')\n\t\t{\n\t\t\tvar output = '[';\n\n\t\t\tvalue.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)\n\n\t\t\tfor (; value.b; value = value.b) // WHILE_CONS\n\t\t\t{\n\t\t\t\toutput += ',' + _Debug_toAnsiString(ansi, value.a);\n\t\t\t}\n\t\t\treturn output + ']';\n\t\t}\n\n\t\tvar output = '';\n\t\tfor (var i in value)\n\t\t{\n\t\t\tif (i === '$') continue;\n\t\t\tvar str = _Debug_toAnsiString(ansi, value[i]);\n\t\t\tvar c0 = str[0];\n\t\t\tvar parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;\n\t\t\toutput += ' ' + (parenless ? str : '(' + str + ')');\n\t\t}\n\t\treturn _Debug_ctorColor(ansi, tag) + output;\n\t}\n\n\tif (typeof DataView === 'function' && value instanceof DataView)\n\t{\n\t\treturn _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');\n\t}\n\n\tif (typeof File !== 'undefined' && value instanceof File)\n\t{\n\t\treturn _Debug_internalColor(ansi, '<' + value.name + '>');\n\t}\n\n\tif (typeof value === 'object')\n\t{\n\t\tvar output = [];\n\t\tfor (var key in value)\n\t\t{\n\t\t\tvar field = key[0] === '_' ? key.slice(1) : key;\n\t\t\toutput.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));\n\t\t}\n\t\tif (output.length === 0)\n\t\t{\n\t\t\treturn '{}';\n\t\t}\n\t\treturn '{ ' + output.join(', ') + ' }';\n\t}\n\n\treturn _Debug_internalColor(ansi, '<internals>');\n}\n\nfunction _Debug_addSlashes(str, isChar)\n{\n\tvar s = str\n\t\t.replace(/\\\\/g, '\\\\\\\\')\n\t\t.replace(/\\n/g, '\\\\n')\n\t\t.replace(/\\t/g, '\\\\t')\n\t\t.replace(/\\r/g, '\\\\r')\n\t\t.replace(/\\v/g, '\\\\v')\n\t\t.replace(/\\0/g, '\\\\0');\n\n\tif (isChar)\n\t{\n\t\treturn s.replace(/\\'/g, '\\\\\\'');\n\t}\n\telse\n\t{\n\t\treturn s.replace(/\\"/g, '\\\\"');\n\t}\n}\n\nfunction _Debug_ctorColor(ansi, string)\n{\n\treturn ansi ? '\\x1b[96m' + string + '\\x1b[0m' : string;\n}\n\nfunction _Debug_numberColor(ansi, string)\n{\n\treturn ansi ? '\\x1b[95m' + string + '\\x1b[0m' : string;\n}\n\nfunction _Debug_stringColor(ansi, string)\n{\n\treturn ansi ? '\\x1b[93m' + string + '\\x1b[0m' : string;\n}\n\nfunction _Debug_charColor(ansi, string)\n{\n\treturn ansi ? '\\x1b[92m' + string + '\\x1b[0m' : string;\n}\n\nfunction _Debug_fadeColor(ansi, string)\n{\n\treturn ansi ? '\\x1b[37m' + string + '\\x1b[0m' : string;\n}\n\nfunction _Debug_internalColor(ansi, string)\n{\n\treturn ansi ? '\\x1b[36m' + string + '\\x1b[0m' : string;\n}\n\nfunction _Debug_toHexDigit(n)\n{\n\treturn String.fromCharCode(n < 10 ? 48 + n : 55 + n);\n}\n\n\n// CRASH\n\n\nfunction _Debug_crash_UNUSED(identifier)\n{\n\tthrow new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');\n}\n\n\nfunction _Debug_crash(identifier, fact1, fact2, fact3, fact4)\n{\n\tswitch(identifier)\n\t{\n\t\tcase 0:\n\t\t\tthrow new Error('What node should I take over? In JavaScript I need something like:\\n\\n    Elm.Main.init({\\n        node: document.getElementById("elm-node")\\n    })\\n\\nYou need to do this with any Browser.sandbox or Browser.element program.');\n\n\t\tcase 1:\n\t\t\tthrow new Error('Browser.application programs cannot handle URLs like this:\\n\\n    ' + document.location.href + '\\n\\nWhat is the root? The root of your file system? Try looking at this program with elm reactor or some other server.');\n\n\t\tcase 2:\n\t\t\tvar jsonErrorString = fact1;\n\t\t\tthrow new Error('Problem with the flags given to your Elm program on initialization.\\n\\n' + jsonErrorString);\n\n\t\tcase 3:\n\t\t\tvar portName = fact1;\n\t\t\tthrow new Error('There can only be one port named ' + portName + ', but your program has multiple.');\n\n\t\tcase 4:\n\t\t\tvar portName = fact1;\n\t\t\tvar problem = fact2;\n\t\t\tthrow new Error('Trying to send an unexpected type of value through port ' + portName + ':\\n' + problem);\n\n\t\tcase 5:\n\t\t\tthrow new Error('Trying to use (==) on functions.\\nThere is no way to know if functions are "the same" in the Elm sense.\\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');\n\n\t\tcase 6:\n\t\t\tvar moduleName = fact1;\n\t\t\tthrow new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');\n\n\t\tcase 8:\n\t\t\tvar moduleName = fact1;\n\t\t\tvar region = fact2;\n\t\t\tvar message = fact3;\n\t\t\tthrow new Error('TODO in module ' + moduleName + ' ' + _Debug_regionToString(region) + '\\n\\n' + message);\n\n\t\tcase 9:\n\t\t\tvar moduleName = fact1;\n\t\t\tvar region = fact2;\n\t\t\tvar value = fact3;\n\t\t\tvar message = fact4;\n\t\t\tthrow new Error(\n\t\t\t\t'TODO in module ' + moduleName + ' from the case expression '\n\t\t\t\t+ _Debug_regionToString(region) + '\\n\\nIt received the following value:\\n\\n    '\n\t\t\t\t+ _Debug_toString(value).replace('\\n', '\\n    ')\n\t\t\t\t+ '\\n\\nBut the branch that handles it says:\\n\\n    ' + message.replace('\\n', '\\n    ')\n\t\t\t);\n\n\t\tcase 10:\n\t\t\tthrow new Error('Bug in https://github.com/elm/virtual-dom/issues');\n\n\t\tcase 11:\n\t\t\tthrow new Error('Cannot perform mod 0. Division by zero error.');\n\t}\n}\n\nfunction _Debug_regionToString(region)\n{\n\tif (region.start.line === region.end.line)\n\t{\n\t\treturn 'on line ' + region.start.line;\n\t}\n\treturn 'on lines ' + region.start.line + ' through ' + region.end.line;\n}\n\n\n\n// EQUALITY\n\nfunction _Utils_eq(x, y)\n{\n\tfor (\n\t\tvar pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);\n\t\tisEqual && (pair = stack.pop());\n\t\tisEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)\n\t\t)\n\t{}\n\n\treturn isEqual;\n}\n\nfunction _Utils_eqHelp(x, y, depth, stack)\n{\n\tif (x === y)\n\t{\n\t\treturn true;\n\t}\n\n\tif (typeof x !== 'object' || x === null || y === null)\n\t{\n\t\ttypeof x === 'function' && _Debug_crash(5);\n\t\treturn false;\n\t}\n\n\tif (depth > 100)\n\t{\n\t\tstack.push(_Utils_Tuple2(x,y));\n\t\treturn true;\n\t}\n\n\t/**/\n\tif (x.$ === 'Set_elm_builtin')\n\t{\n\t\tx = $elm$core$Set$toList(x);\n\t\ty = $elm$core$Set$toList(y);\n\t}\n\tif (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')\n\t{\n\t\tx = $elm$core$Dict$toList(x);\n\t\ty = $elm$core$Dict$toList(y);\n\t}\n\t//*/\n\n\t/**_UNUSED/\n\tif (x.$ < 0)\n\t{\n\t\tx = $elm$core$Dict$toList(x);\n\t\ty = $elm$core$Dict$toList(y);\n\t}\n\t//*/\n\n\tfor (var key in x)\n\t{\n\t\tif (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nvar _Utils_equal = F2(_Utils_eq);\nvar _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });\n\n\n\n// COMPARISONS\n\n// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on\n// the particular integer values assigned to LT, EQ, and GT.\n\nfunction _Utils_cmp(x, y, ord)\n{\n\tif (typeof x !== 'object')\n\t{\n\t\treturn x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;\n\t}\n\n\t/**/\n\tif (x instanceof String)\n\t{\n\t\tvar a = x.valueOf();\n\t\tvar b = y.valueOf();\n\t\treturn a === b ? 0 : a < b ? -1 : 1;\n\t}\n\t//*/\n\n\t/**_UNUSED/\n\tif (typeof x.$ === 'undefined')\n\t//*/\n\t/**/\n\tif (x.$[0] === '#')\n\t//*/\n\t{\n\t\treturn (ord = _Utils_cmp(x.a, y.a))\n\t\t\t? ord\n\t\t\t: (ord = _Utils_cmp(x.b, y.b))\n\t\t\t\t? ord\n\t\t\t\t: _Utils_cmp(x.c, y.c);\n\t}\n\n\t// traverse conses until end of a list or a mismatch\n\tfor (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES\n\treturn ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);\n}\n\nvar _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });\nvar _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });\nvar _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });\nvar _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });\n\nvar _Utils_compare = F2(function(x, y)\n{\n\tvar n = _Utils_cmp(x, y);\n\treturn n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;\n});\n\n\n// COMMON VALUES\n\nvar _Utils_Tuple0_UNUSED = 0;\nvar _Utils_Tuple0 = { $: '#0' };\n\nfunction _Utils_Tuple2_UNUSED(a, b) { return { a: a, b: b }; }\nfunction _Utils_Tuple2(a, b) { return { $: '#2', a: a, b: b }; }\n\nfunction _Utils_Tuple3_UNUSED(a, b, c) { return { a: a, b: b, c: c }; }\nfunction _Utils_Tuple3(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }\n\nfunction _Utils_chr_UNUSED(c) { return c; }\nfunction _Utils_chr(c) { return new String(c); }\n\n\n// RECORDS\n\nfunction _Utils_update(oldRecord, updatedFields)\n{\n\tvar newRecord = {};\n\n\tfor (var key in oldRecord)\n\t{\n\t\tnewRecord[key] = oldRecord[key];\n\t}\n\n\tfor (var key in updatedFields)\n\t{\n\t\tnewRecord[key] = updatedFields[key];\n\t}\n\n\treturn newRecord;\n}\n\n\n// APPEND\n\nvar _Utils_append = F2(_Utils_ap);\n\nfunction _Utils_ap(xs, ys)\n{\n\t// append Strings\n\tif (typeof xs === 'string')\n\t{\n\t\treturn xs + ys;\n\t}\n\n\t// append Lists\n\tif (!xs.b)\n\t{\n\t\treturn ys;\n\t}\n\tvar root = _List_Cons(xs.a, ys);\n\txs = xs.b\n\tfor (var curr = root; xs.b; xs = xs.b) // WHILE_CONS\n\t{\n\t\tcurr = curr.b = _List_Cons(xs.a, ys);\n\t}\n\treturn root;\n}\n\n\n\nvar _List_Nil_UNUSED = { $: 0 };\nvar _List_Nil = { $: '[]' };\n\nfunction _List_Cons_UNUSED(hd, tl) { return { $: 1, a: hd, b: tl }; }\nfunction _List_Cons(hd, tl) { return { $: '::', a: hd, b: tl }; }\n\n\nvar _List_cons = F2(_List_Cons);\n\nfunction _List_fromArray(arr)\n{\n\tvar out = _List_Nil;\n\tfor (var i = arr.length; i--; )\n\t{\n\t\tout = _List_Cons(arr[i], out);\n\t}\n\treturn out;\n}\n\nfunction _List_toArray(xs)\n{\n\tfor (var out = []; xs.b; xs = xs.b) // WHILE_CONS\n\t{\n\t\tout.push(xs.a);\n\t}\n\treturn out;\n}\n\nvar _List_map2 = F3(function(f, xs, ys)\n{\n\tfor (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES\n\t{\n\t\tarr.push(A2(f, xs.a, ys.a));\n\t}\n\treturn _List_fromArray(arr);\n});\n\nvar _List_map3 = F4(function(f, xs, ys, zs)\n{\n\tfor (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES\n\t{\n\t\tarr.push(A3(f, xs.a, ys.a, zs.a));\n\t}\n\treturn _List_fromArray(arr);\n});\n\nvar _List_map4 = F5(function(f, ws, xs, ys, zs)\n{\n\tfor (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES\n\t{\n\t\tarr.push(A4(f, ws.a, xs.a, ys.a, zs.a));\n\t}\n\treturn _List_fromArray(arr);\n});\n\nvar _List_map5 = F6(function(f, vs, ws, xs, ys, zs)\n{\n\tfor (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES\n\t{\n\t\tarr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));\n\t}\n\treturn _List_fromArray(arr);\n});\n\nvar _List_sortBy = F2(function(f, xs)\n{\n\treturn _List_fromArray(_List_toArray(xs).sort(function(a, b) {\n\t\treturn _Utils_cmp(f(a), f(b));\n\t}));\n});\n\nvar _List_sortWith = F2(function(f, xs)\n{\n\treturn _List_fromArray(_List_toArray(xs).sort(function(a, b) {\n\t\tvar ord = A2(f, a, b);\n\t\treturn ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;\n\t}));\n});\n\n\n\n// MATH\n\nvar _Basics_add = F2(function(a, b) { return a + b; });\nvar _Basics_sub = F2(function(a, b) { return a - b; });\nvar _Basics_mul = F2(function(a, b) { return a * b; });\nvar _Basics_fdiv = F2(function(a, b) { return a / b; });\nvar _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });\nvar _Basics_pow = F2(Math.pow);\n\nvar _Basics_remainderBy = F2(function(b, a) { return a % b; });\n\n// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf\nvar _Basics_modBy = F2(function(modulus, x)\n{\n\tvar answer = x % modulus;\n\treturn modulus === 0\n\t\t? _Debug_crash(11)\n\t\t:\n\t((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))\n\t\t? answer + modulus\n\t\t: answer;\n});\n\n\n// TRIGONOMETRY\n\nvar _Basics_pi = Math.PI;\nvar _Basics_e = Math.E;\nvar _Basics_cos = Math.cos;\nvar _Basics_sin = Math.sin;\nvar _Basics_tan = Math.tan;\nvar _Basics_acos = Math.acos;\nvar _Basics_asin = Math.asin;\nvar _Basics_atan = Math.atan;\nvar _Basics_atan2 = F2(Math.atan2);\n\n\n// MORE MATH\n\nfunction _Basics_toFloat(x) { return x; }\nfunction _Basics_truncate(n) { return n | 0; }\nfunction _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }\n\nvar _Basics_ceiling = Math.ceil;\nvar _Basics_floor = Math.floor;\nvar _Basics_round = Math.round;\nvar _Basics_sqrt = Math.sqrt;\nvar _Basics_log = Math.log;\nvar _Basics_isNaN = isNaN;\n\n\n// BOOLEANS\n\nfunction _Basics_not(bool) { return !bool; }\nvar _Basics_and = F2(function(a, b) { return a && b; });\nvar _Basics_or  = F2(function(a, b) { return a || b; });\nvar _Basics_xor = F2(function(a, b) { return a !== b; });\n\n\n\nvar _String_cons = F2(function(chr, str)\n{\n\treturn chr + str;\n});\n\nfunction _String_uncons(string)\n{\n\tvar word = string.charCodeAt(0);\n\treturn !isNaN(word)\n\t\t? $elm$core$Maybe$Just(\n\t\t\t0xD800 <= word && word <= 0xDBFF\n\t\t\t\t? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))\n\t\t\t\t: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))\n\t\t)\n\t\t: $elm$core$Maybe$Nothing;\n}\n\nvar _String_append = F2(function(a, b)\n{\n\treturn a + b;\n});\n\nfunction _String_length(str)\n{\n\treturn str.length;\n}\n\nvar _String_map = F2(function(func, string)\n{\n\tvar len = string.length;\n\tvar array = new Array(len);\n\tvar i = 0;\n\twhile (i < len)\n\t{\n\t\tvar word = string.charCodeAt(i);\n\t\tif (0xD800 <= word && word <= 0xDBFF)\n\t\t{\n\t\t\tarray[i] = func(_Utils_chr(string[i] + string[i+1]));\n\t\t\ti += 2;\n\t\t\tcontinue;\n\t\t}\n\t\tarray[i] = func(_Utils_chr(string[i]));\n\t\ti++;\n\t}\n\treturn array.join('');\n});\n\nvar _String_filter = F2(function(isGood, str)\n{\n\tvar arr = [];\n\tvar len = str.length;\n\tvar i = 0;\n\twhile (i < len)\n\t{\n\t\tvar char = str[i];\n\t\tvar word = str.charCodeAt(i);\n\t\ti++;\n\t\tif (0xD800 <= word && word <= 0xDBFF)\n\t\t{\n\t\t\tchar += str[i];\n\t\t\ti++;\n\t\t}\n\n\t\tif (isGood(_Utils_chr(char)))\n\t\t{\n\t\t\tarr.push(char);\n\t\t}\n\t}\n\treturn arr.join('');\n});\n\nfunction _String_reverse(str)\n{\n\tvar len = str.length;\n\tvar arr = new Array(len);\n\tvar i = 0;\n\twhile (i < len)\n\t{\n\t\tvar word = str.charCodeAt(i);\n\t\tif (0xD800 <= word && word <= 0xDBFF)\n\t\t{\n\t\t\tarr[len - i] = str[i + 1];\n\t\t\ti++;\n\t\t\tarr[len - i] = str[i - 1];\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tarr[len - i] = str[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn arr.join('');\n}\n\nvar _String_foldl = F3(function(func, state, string)\n{\n\tvar len = string.length;\n\tvar i = 0;\n\twhile (i < len)\n\t{\n\t\tvar char = string[i];\n\t\tvar word = string.charCodeAt(i);\n\t\ti++;\n\t\tif (0xD800 <= word && word <= 0xDBFF)\n\t\t{\n\t\t\tchar += string[i];\n\t\t\ti++;\n\t\t}\n\t\tstate = A2(func, _Utils_chr(char), state);\n\t}\n\treturn state;\n});\n\nvar _String_foldr = F3(function(func, state, string)\n{\n\tvar i = string.length;\n\twhile (i--)\n\t{\n\t\tvar char = string[i];\n\t\tvar word = string.charCodeAt(i);\n\t\tif (0xDC00 <= word && word <= 0xDFFF)\n\t\t{\n\t\t\ti--;\n\t\t\tchar = string[i] + char;\n\t\t}\n\t\tstate = A2(func, _Utils_chr(char), state);\n\t}\n\treturn state;\n});\n\nvar _String_split = F2(function(sep, str)\n{\n\treturn str.split(sep);\n});\n\nvar _String_join = F2(function(sep, strs)\n{\n\treturn strs.join(sep);\n});\n\nvar _String_slice = F3(function(start, end, str) {\n\treturn str.slice(start, end);\n});\n\nfunction _String_trim(str)\n{\n\treturn str.trim();\n}\n\nfunction _String_trimLeft(str)\n{\n\treturn str.replace(/^\\s+/, '');\n}\n\nfunction _String_trimRight(str)\n{\n\treturn str.replace(/\\s+$/, '');\n}\n\nfunction _String_words(str)\n{\n\treturn _List_fromArray(str.trim().split(/\\s+/g));\n}\n\nfunction _String_lines(str)\n{\n\treturn _List_fromArray(str.split(/\\r\\n|\\r|\\n/g));\n}\n\nfunction _String_toUpper(str)\n{\n\treturn str.toUpperCase();\n}\n\nfunction _String_toLower(str)\n{\n\treturn str.toLowerCase();\n}\n\nvar _String_any = F2(function(isGood, string)\n{\n\tvar i = string.length;\n\twhile (i--)\n\t{\n\t\tvar char = string[i];\n\t\tvar word = string.charCodeAt(i);\n\t\tif (0xDC00 <= word && word <= 0xDFFF)\n\t\t{\n\t\t\ti--;\n\t\t\tchar = string[i] + char;\n\t\t}\n\t\tif (isGood(_Utils_chr(char)))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n});\n\nvar _String_all = F2(function(isGood, string)\n{\n\tvar i = string.length;\n\twhile (i--)\n\t{\n\t\tvar char = string[i];\n\t\tvar word = string.charCodeAt(i);\n\t\tif (0xDC00 <= word && word <= 0xDFFF)\n\t\t{\n\t\t\ti--;\n\t\t\tchar = string[i] + char;\n\t\t}\n\t\tif (!isGood(_Utils_chr(char)))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n});\n\nvar _String_contains = F2(function(sub, str)\n{\n\treturn str.indexOf(sub) > -1;\n});\n\nvar _String_startsWith = F2(function(sub, str)\n{\n\treturn str.indexOf(sub) === 0;\n});\n\nvar _String_endsWith = F2(function(sub, str)\n{\n\treturn str.length >= sub.length &&\n\t\tstr.lastIndexOf(sub) === str.length - sub.length;\n});\n\nvar _String_indexes = F2(function(sub, str)\n{\n\tvar subLen = sub.length;\n\n\tif (subLen < 1)\n\t{\n\t\treturn _List_Nil;\n\t}\n\n\tvar i = 0;\n\tvar is = [];\n\n\twhile ((i = str.indexOf(sub, i)) > -1)\n\t{\n\t\tis.push(i);\n\t\ti = i + subLen;\n\t}\n\n\treturn _List_fromArray(is);\n});\n\n\n// TO STRING\n\nfunction _String_fromNumber(number)\n{\n\treturn number + '';\n}\n\n\n// INT CONVERSIONS\n\nfunction _String_toInt(str)\n{\n\tvar total = 0;\n\tvar code0 = str.charCodeAt(0);\n\tvar start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;\n\n\tfor (var i = start; i < str.length; ++i)\n\t{\n\t\tvar code = str.charCodeAt(i);\n\t\tif (code < 0x30 || 0x39 < code)\n\t\t{\n\t\t\treturn $elm$core$Maybe$Nothing;\n\t\t}\n\t\ttotal = 10 * total + code - 0x30;\n\t}\n\n\treturn i == start\n\t\t? $elm$core$Maybe$Nothing\n\t\t: $elm$core$Maybe$Just(code0 == 0x2D ? -total : total);\n}\n\n\n// FLOAT CONVERSIONS\n\nfunction _String_toFloat(s)\n{\n\t// check if it is a hex, octal, or binary number\n\tif (s.length === 0 || /[\\sxbo]/.test(s))\n\t{\n\t\treturn $elm$core$Maybe$Nothing;\n\t}\n\tvar n = +s;\n\t// faster isNaN check\n\treturn n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;\n}\n\nfunction _String_fromList(chars)\n{\n\treturn _List_toArray(chars).join('');\n}\n\n\n\n\nfunction _Char_toCode(char)\n{\n\tvar code = char.charCodeAt(0);\n\tif (0xD800 <= code && code <= 0xDBFF)\n\t{\n\t\treturn (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000\n\t}\n\treturn code;\n}\n\nfunction _Char_fromCode(code)\n{\n\treturn _Utils_chr(\n\t\t(code < 0 || 0x10FFFF < code)\n\t\t\t? '\\uFFFD'\n\t\t\t:\n\t\t(code <= 0xFFFF)\n\t\t\t? String.fromCharCode(code)\n\t\t\t:\n\t\t(code -= 0x10000,\n\t\t\tString.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)\n\t\t)\n\t);\n}\n\nfunction _Char_toUpper(char)\n{\n\treturn _Utils_chr(char.toUpperCase());\n}\n\nfunction _Char_toLower(char)\n{\n\treturn _Utils_chr(char.toLowerCase());\n}\n\nfunction _Char_toLocaleUpper(char)\n{\n\treturn _Utils_chr(char.toLocaleUpperCase());\n}\n\nfunction _Char_toLocaleLower(char)\n{\n\treturn _Utils_chr(char.toLocaleLowerCase());\n}\n\n\n\n/**/\nfunction _Json_errorToString(error)\n{\n\treturn $elm$json$Json$Decode$errorToString(error);\n}\n//*/\n\n\n// CORE DECODERS\n\nfunction _Json_succeed(msg)\n{\n\treturn {\n\t\t$: 0,\n\t\ta: msg\n\t};\n}\n\nfunction _Json_fail(msg)\n{\n\treturn {\n\t\t$: 1,\n\t\ta: msg\n\t};\n}\n\nfunction _Json_decodePrim(decoder)\n{\n\treturn { $: 2, b: decoder };\n}\n\nvar _Json_decodeInt = _Json_decodePrim(function(value) {\n\treturn (typeof value !== 'number')\n\t\t? _Json_expecting('an INT', value)\n\t\t:\n\t(-2147483647 < value && value < 2147483647 && (value | 0) === value)\n\t\t? $elm$core$Result$Ok(value)\n\t\t:\n\t(isFinite(value) && !(value % 1))\n\t\t? $elm$core$Result$Ok(value)\n\t\t: _Json_expecting('an INT', value);\n});\n\nvar _Json_decodeBool = _Json_decodePrim(function(value) {\n\treturn (typeof value === 'boolean')\n\t\t? $elm$core$Result$Ok(value)\n\t\t: _Json_expecting('a BOOL', value);\n});\n\nvar _Json_decodeFloat = _Json_decodePrim(function(value) {\n\treturn (typeof value === 'number')\n\t\t? $elm$core$Result$Ok(value)\n\t\t: _Json_expecting('a FLOAT', value);\n});\n\nvar _Json_decodeValue = _Json_decodePrim(function(value) {\n\treturn $elm$core$Result$Ok(_Json_wrap(value));\n});\n\nvar _Json_decodeString = _Json_decodePrim(function(value) {\n\treturn (typeof value === 'string')\n\t\t? $elm$core$Result$Ok(value)\n\t\t: (value instanceof String)\n\t\t\t? $elm$core$Result$Ok(value + '')\n\t\t\t: _Json_expecting('a STRING', value);\n});\n\nfunction _Json_decodeList(decoder) { return { $: 3, b: decoder }; }\nfunction _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }\n\nfunction _Json_decodeNull(value) { return { $: 5, c: value }; }\n\nvar _Json_decodeField = F2(function(field, decoder)\n{\n\treturn {\n\t\t$: 6,\n\t\td: field,\n\t\tb: decoder\n\t};\n});\n\nvar _Json_decodeIndex = F2(function(index, decoder)\n{\n\treturn {\n\t\t$: 7,\n\t\te: index,\n\t\tb: decoder\n\t};\n});\n\nfunction _Json_decodeKeyValuePairs(decoder)\n{\n\treturn {\n\t\t$: 8,\n\t\tb: decoder\n\t};\n}\n\nfunction _Json_mapMany(f, decoders)\n{\n\treturn {\n\t\t$: 9,\n\t\tf: f,\n\t\tg: decoders\n\t};\n}\n\nvar _Json_andThen = F2(function(callback, decoder)\n{\n\treturn {\n\t\t$: 10,\n\t\tb: decoder,\n\t\th: callback\n\t};\n});\n\nfunction _Json_oneOf(decoders)\n{\n\treturn {\n\t\t$: 11,\n\t\tg: decoders\n\t};\n}\n\n\n// DECODING OBJECTS\n\nvar _Json_map1 = F2(function(f, d1)\n{\n\treturn _Json_mapMany(f, [d1]);\n});\n\nvar _Json_map2 = F3(function(f, d1, d2)\n{\n\treturn _Json_mapMany(f, [d1, d2]);\n});\n\nvar _Json_map3 = F4(function(f, d1, d2, d3)\n{\n\treturn _Json_mapMany(f, [d1, d2, d3]);\n});\n\nvar _Json_map4 = F5(function(f, d1, d2, d3, d4)\n{\n\treturn _Json_mapMany(f, [d1, d2, d3, d4]);\n});\n\nvar _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)\n{\n\treturn _Json_mapMany(f, [d1, d2, d3, d4, d5]);\n});\n\nvar _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)\n{\n\treturn _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);\n});\n\nvar _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)\n{\n\treturn _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);\n});\n\nvar _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)\n{\n\treturn _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);\n});\n\n\n// DECODE\n\nvar _Json_runOnString = F2(function(decoder, string)\n{\n\ttry\n\t{\n\t\tvar value = JSON.parse(string);\n\t\treturn _Json_runHelp(decoder, value);\n\t}\n\tcatch (e)\n\t{\n\t\treturn $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));\n\t}\n});\n\nvar _Json_run = F2(function(decoder, value)\n{\n\treturn _Json_runHelp(decoder, _Json_unwrap(value));\n});\n\nfunction _Json_runHelp(decoder, value)\n{\n\tswitch (decoder.$)\n\t{\n\t\tcase 2:\n\t\t\treturn decoder.b(value);\n\n\t\tcase 5:\n\t\t\treturn (value === null)\n\t\t\t\t? $elm$core$Result$Ok(decoder.c)\n\t\t\t\t: _Json_expecting('null', value);\n\n\t\tcase 3:\n\t\t\tif (!_Json_isArray(value))\n\t\t\t{\n\t\t\t\treturn _Json_expecting('a LIST', value);\n\t\t\t}\n\t\t\treturn _Json_runArrayDecoder(decoder.b, value, _List_fromArray);\n\n\t\tcase 4:\n\t\t\tif (!_Json_isArray(value))\n\t\t\t{\n\t\t\t\treturn _Json_expecting('an ARRAY', value);\n\t\t\t}\n\t\t\treturn _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);\n\n\t\tcase 6:\n\t\t\tvar field = decoder.d;\n\t\t\tif (typeof value !== 'object' || value === null || !(field in value))\n\t\t\t{\n\t\t\t\treturn _Json_expecting('an OBJECT with a field named ' + field + '', value);\n\t\t\t}\n\t\t\tvar result = _Json_runHelp(decoder.b, value[field]);\n\t\t\treturn ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));\n\n\t\tcase 7:\n\t\t\tvar index = decoder.e;\n\t\t\tif (!_Json_isArray(value))\n\t\t\t{\n\t\t\t\treturn _Json_expecting('an ARRAY', value);\n\t\t\t}\n\t\t\tif (index >= value.length)\n\t\t\t{\n\t\t\t\treturn _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);\n\t\t\t}\n\t\t\tvar result = _Json_runHelp(decoder.b, value[index]);\n\t\t\treturn ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));\n\n\t\tcase 8:\n\t\t\tif (typeof value !== 'object' || value === null || _Json_isArray(value))\n\t\t\t{\n\t\t\t\treturn _Json_expecting('an OBJECT', value);\n\t\t\t}\n\n\t\t\tvar keyValuePairs = _List_Nil;\n\t\t\t// TODO test perf of Object.keys and switch when support is good enough\n\t\t\tfor (var key in value)\n\t\t\t{\n\t\t\t\tif (value.hasOwnProperty(key))\n\t\t\t\t{\n\t\t\t\t\tvar result = _Json_runHelp(decoder.b, value[key]);\n\t\t\t\t\tif (!$elm$core$Result$isOk(result))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));\n\t\t\t\t\t}\n\t\t\t\t\tkeyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));\n\n\t\tcase 9:\n\t\t\tvar answer = decoder.f;\n\t\t\tvar decoders = decoder.g;\n\t\t\tfor (var i = 0; i < decoders.length; i++)\n\t\t\t{\n\t\t\t\tvar result = _Json_runHelp(decoders[i], value);\n\t\t\t\tif (!$elm$core$Result$isOk(result))\n\t\t\t\t{\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\tanswer = answer(result.a);\n\t\t\t}\n\t\t\treturn $elm$core$Result$Ok(answer);\n\n\t\tcase 10:\n\t\t\tvar result = _Json_runHelp(decoder.b, value);\n\t\t\treturn (!$elm$core$Result$isOk(result))\n\t\t\t\t? result\n\t\t\t\t: _Json_runHelp(decoder.h(result.a), value);\n\n\t\tcase 11:\n\t\t\tvar errors = _List_Nil;\n\t\t\tfor (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS\n\t\t\t{\n\t\t\t\tvar result = _Json_runHelp(temp.a, value);\n\t\t\t\tif ($elm$core$Result$isOk(result))\n\t\t\t\t{\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\terrors = _List_Cons(result.a, errors);\n\t\t\t}\n\t\t\treturn $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));\n\n\t\tcase 1:\n\t\t\treturn $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));\n\n\t\tcase 0:\n\t\t\treturn $elm$core$Result$Ok(decoder.a);\n\t}\n}\n\nfunction _Json_runArrayDecoder(decoder, value, toElmValue)\n{\n\tvar len = value.length;\n\tvar array = new Array(len);\n\tfor (var i = 0; i < len; i++)\n\t{\n\t\tvar result = _Json_runHelp(decoder, value[i]);\n\t\tif (!$elm$core$Result$isOk(result))\n\t\t{\n\t\t\treturn $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));\n\t\t}\n\t\tarray[i] = result.a;\n\t}\n\treturn $elm$core$Result$Ok(toElmValue(array));\n}\n\nfunction _Json_isArray(value)\n{\n\treturn Array.isArray(value) || (typeof FileList !== 'undefined' && value instanceof FileList);\n}\n\nfunction _Json_toElmArray(array)\n{\n\treturn A2($elm$core$Array$initialize, array.length, function(i) { return array[i]; });\n}\n\nfunction _Json_expecting(type, value)\n{\n\treturn $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));\n}\n\n\n// EQUALITY\n\nfunction _Json_equality(x, y)\n{\n\tif (x === y)\n\t{\n\t\treturn true;\n\t}\n\n\tif (x.$ !== y.$)\n\t{\n\t\treturn false;\n\t}\n\n\tswitch (x.$)\n\t{\n\t\tcase 0:\n\t\tcase 1:\n\t\t\treturn x.a === y.a;\n\n\t\tcase 2:\n\t\t\treturn x.b === y.b;\n\n\t\tcase 5:\n\t\t\treturn x.c === y.c;\n\n\t\tcase 3:\n\t\tcase 4:\n\t\tcase 8:\n\t\t\treturn _Json_equality(x.b, y.b);\n\n\t\tcase 6:\n\t\t\treturn x.d === y.d && _Json_equality(x.b, y.b);\n\n\t\tcase 7:\n\t\t\treturn x.e === y.e && _Json_equality(x.b, y.b);\n\n\t\tcase 9:\n\t\t\treturn x.f === y.f && _Json_listEquality(x.g, y.g);\n\n\t\tcase 10:\n\t\t\treturn x.h === y.h && _Json_equality(x.b, y.b);\n\n\t\tcase 11:\n\t\t\treturn _Json_listEquality(x.g, y.g);\n\t}\n}\n\nfunction _Json_listEquality(aDecoders, bDecoders)\n{\n\tvar len = aDecoders.length;\n\tif (len !== bDecoders.length)\n\t{\n\t\treturn false;\n\t}\n\tfor (var i = 0; i < len; i++)\n\t{\n\t\tif (!_Json_equality(aDecoders[i], bDecoders[i]))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n\n// ENCODE\n\nvar _Json_encode = F2(function(indentLevel, value)\n{\n\treturn JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';\n});\n\nfunction _Json_wrap(value) { return { $: 0, a: value }; }\nfunction _Json_unwrap(value) { return value.a; }\n\nfunction _Json_wrap_UNUSED(value) { return value; }\nfunction _Json_unwrap_UNUSED(value) { return value; }\n\nfunction _Json_emptyArray() { return []; }\nfunction _Json_emptyObject() { return {}; }\n\nvar _Json_addField = F3(function(key, value, object)\n{\n\tobject[key] = _Json_unwrap(value);\n\treturn object;\n});\n\nfunction _Json_addEntry(func)\n{\n\treturn F2(function(entry, array)\n\t{\n\t\tarray.push(_Json_unwrap(func(entry)));\n\t\treturn array;\n\t});\n}\n\nvar _Json_encodeNull = _Json_wrap(null);\n\n\n\n// TASKS\n\nfunction _Scheduler_succeed(value)\n{\n\treturn {\n\t\t$: 0,\n\t\ta: value\n\t};\n}\n\nfunction _Scheduler_fail(error)\n{\n\treturn {\n\t\t$: 1,\n\t\ta: error\n\t};\n}\n\nfunction _Scheduler_binding(callback)\n{\n\treturn {\n\t\t$: 2,\n\t\tb: callback,\n\t\tc: null\n\t};\n}\n\nvar _Scheduler_andThen = F2(function(callback, task)\n{\n\treturn {\n\t\t$: 3,\n\t\tb: callback,\n\t\td: task\n\t};\n});\n\nvar _Scheduler_onError = F2(function(callback, task)\n{\n\treturn {\n\t\t$: 4,\n\t\tb: callback,\n\t\td: task\n\t};\n});\n\nfunction _Scheduler_receive(callback)\n{\n\treturn {\n\t\t$: 5,\n\t\tb: callback\n\t};\n}\n\n\n// PROCESSES\n\nvar _Scheduler_guid = 0;\n\nfunction _Scheduler_rawSpawn(task)\n{\n\tvar proc = {\n\t\t$: 0,\n\t\te: _Scheduler_guid++,\n\t\tf: task,\n\t\tg: null,\n\t\th: []\n\t};\n\n\t_Scheduler_enqueue(proc);\n\n\treturn proc;\n}\n\nfunction _Scheduler_spawn(task)\n{\n\treturn _Scheduler_binding(function(callback) {\n\t\tcallback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));\n\t});\n}\n\nfunction _Scheduler_rawSend(proc, msg)\n{\n\tproc.h.push(msg);\n\t_Scheduler_enqueue(proc);\n}\n\nvar _Scheduler_send = F2(function(proc, msg)\n{\n\treturn _Scheduler_binding(function(callback) {\n\t\t_Scheduler_rawSend(proc, msg);\n\t\tcallback(_Scheduler_succeed(_Utils_Tuple0));\n\t});\n});\n\nfunction _Scheduler_kill(proc)\n{\n\treturn _Scheduler_binding(function(callback) {\n\t\tvar task = proc.f;\n\t\tif (task.$ === 2 && task.c)\n\t\t{\n\t\t\ttask.c();\n\t\t}\n\n\t\tproc.f = null;\n\n\t\tcallback(_Scheduler_succeed(_Utils_Tuple0));\n\t});\n}\n\n\n/* STEP PROCESSES\n\ntype alias Process =\n  { $ : tag\n  , id : unique_id\n  , root : Task\n  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }\n  , mailbox : [msg]\n  }\n\n*/\n\n\nvar _Scheduler_working = false;\nvar _Scheduler_queue = [];\n\n\nfunction _Scheduler_enqueue(proc)\n{\n\t_Scheduler_queue.push(proc);\n\tif (_Scheduler_working)\n\t{\n\t\treturn;\n\t}\n\t_Scheduler_working = true;\n\twhile (proc = _Scheduler_queue.shift())\n\t{\n\t\t_Scheduler_step(proc);\n\t}\n\t_Scheduler_working = false;\n}\n\n\nfunction _Scheduler_step(proc)\n{\n\twhile (proc.f)\n\t{\n\t\tvar rootTag = proc.f.$;\n\t\tif (rootTag === 0 || rootTag === 1)\n\t\t{\n\t\t\twhile (proc.g && proc.g.$ !== rootTag)\n\t\t\t{\n\t\t\t\tproc.g = proc.g.i;\n\t\t\t}\n\t\t\tif (!proc.g)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tproc.f = proc.g.b(proc.f.a);\n\t\t\tproc.g = proc.g.i;\n\t\t}\n\t\telse if (rootTag === 2)\n\t\t{\n\t\t\tproc.f.c = proc.f.b(function(newRoot) {\n\t\t\t\tproc.f = newRoot;\n\t\t\t\t_Scheduler_enqueue(proc);\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\telse if (rootTag === 5)\n\t\t{\n\t\t\tif (proc.h.length === 0)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tproc.f = proc.f.b(proc.h.shift());\n\t\t}\n\t\telse // if (rootTag === 3 || rootTag === 4)\n\t\t{\n\t\t\tproc.g = {\n\t\t\t\t$: rootTag === 3 ? 0 : 1,\n\t\t\t\tb: proc.f.b,\n\t\t\t\ti: proc.g\n\t\t\t};\n\t\t\tproc.f = proc.f.d;\n\t\t}\n\t}\n}\n\n\n\nfunction _Process_sleep(time)\n{\n\treturn _Scheduler_binding(function(callback) {\n\t\tvar id = setTimeout(function() {\n\t\t\tcallback(_Scheduler_succeed(_Utils_Tuple0));\n\t\t}, time);\n\n\t\treturn function() { clearTimeout(id); };\n\t});\n}\n\n\n\n\n// PROGRAMS\n\n\nvar _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)\n{\n\treturn _Platform_initialize(\n\t\tflagDecoder,\n\t\targs,\n\t\timpl.init,\n\t\timpl.update,\n\t\timpl.subscriptions,\n\t\tfunction() { return function() {} }\n\t);\n});\n\n\n\n// INITIALIZE A PROGRAM\n\n\nfunction _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)\n{\n\tvar result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));\n\t$elm$core$Result$isOk(result) || _Debug_crash(2 /**/, _Json_errorToString(result.a) /**/);\n\tvar managers = {};\n\tvar initPair = init(result.a);\n\tvar model = initPair.a;\n\tvar stepper = stepperBuilder(sendToApp, model);\n\tvar ports = _Platform_setupEffects(managers, sendToApp);\n\n\tfunction sendToApp(msg, viewMetadata)\n\t{\n\t\tvar pair = A2(update, msg, model);\n\t\tstepper(model = pair.a, viewMetadata);\n\t\t_Platform_enqueueEffects(managers, pair.b, subscriptions(model));\n\t}\n\n\t_Platform_enqueueEffects(managers, initPair.b, subscriptions(model));\n\n\treturn ports ? { ports: ports } : {};\n}\n\n\n\n// TRACK PRELOADS\n//\n// This is used by code in elm/browser and elm/http\n// to register any HTTP requests that are triggered by init.\n//\n\n\nvar _Platform_preload;\n\n\nfunction _Platform_registerPreload(url)\n{\n\t_Platform_preload.add(url);\n}\n\n\n\n// EFFECT MANAGERS\n\n\nvar _Platform_effectManagers = {};\n\n\nfunction _Platform_setupEffects(managers, sendToApp)\n{\n\tvar ports;\n\n\t// setup all necessary effect managers\n\tfor (var key in _Platform_effectManagers)\n\t{\n\t\tvar manager = _Platform_effectManagers[key];\n\n\t\tif (manager.a)\n\t\t{\n\t\t\tports = ports || {};\n\t\t\tports[key] = manager.a(key, sendToApp);\n\t\t}\n\n\t\tmanagers[key] = _Platform_instantiateManager(manager, sendToApp);\n\t}\n\n\treturn ports;\n}\n\n\nfunction _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)\n{\n\treturn {\n\t\tb: init,\n\t\tc: onEffects,\n\t\td: onSelfMsg,\n\t\te: cmdMap,\n\t\tf: subMap\n\t};\n}\n\n\nfunction _Platform_instantiateManager(info, sendToApp)\n{\n\tvar router = {\n\t\tg: sendToApp,\n\t\th: undefined\n\t};\n\n\tvar onEffects = info.c;\n\tvar onSelfMsg = info.d;\n\tvar cmdMap = info.e;\n\tvar subMap = info.f;\n\n\tfunction loop(state)\n\t{\n\t\treturn A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)\n\t\t{\n\t\t\tvar value = msg.a;\n\n\t\t\tif (msg.$ === 0)\n\t\t\t{\n\t\t\t\treturn A3(onSelfMsg, router, value, state);\n\t\t\t}\n\n\t\t\treturn cmdMap && subMap\n\t\t\t\t? A4(onEffects, router, value.i, value.j, state)\n\t\t\t\t: A3(onEffects, router, cmdMap ? value.i : value.j, state);\n\t\t}));\n\t}\n\n\treturn router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));\n}\n\n\n\n// ROUTING\n\n\nvar _Platform_sendToApp = F2(function(router, msg)\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\trouter.g(msg);\n\t\tcallback(_Scheduler_succeed(_Utils_Tuple0));\n\t});\n});\n\n\nvar _Platform_sendToSelf = F2(function(router, msg)\n{\n\treturn A2(_Scheduler_send, router.h, {\n\t\t$: 0,\n\t\ta: msg\n\t});\n});\n\n\n\n// BAGS\n\n\nfunction _Platform_leaf(home)\n{\n\treturn function(value)\n\t{\n\t\treturn {\n\t\t\t$: 1,\n\t\t\tk: home,\n\t\t\tl: value\n\t\t};\n\t};\n}\n\n\nfunction _Platform_batch(list)\n{\n\treturn {\n\t\t$: 2,\n\t\tm: list\n\t};\n}\n\n\nvar _Platform_map = F2(function(tagger, bag)\n{\n\treturn {\n\t\t$: 3,\n\t\tn: tagger,\n\t\to: bag\n\t}\n});\n\n\n\n// PIPE BAGS INTO EFFECT MANAGERS\n//\n// Effects must be queued!\n//\n// Say your init contains a synchronous command, like Time.now or Time.here\n//\n//   - This will produce a batch of effects (FX_1)\n//   - The synchronous task triggers the subsequent update call\n//   - This will produce a batch of effects (FX_2)\n//\n// If we just start dispatching FX_2, subscriptions from FX_2 can be processed\n// before subscriptions from FX_1. No good! Earlier versions of this code had\n// this problem, leading to these reports:\n//\n//   https://github.com/elm/core/issues/980\n//   https://github.com/elm/core/pull/981\n//   https://github.com/elm/compiler/issues/1776\n//\n// The queue is necessary to avoid ordering issues for synchronous commands.\n\n\n// Why use true/false here? Why not just check the length of the queue?\n// The goal is to detect "are we currently dispatching effects?" If we\n// are, we need to bail and let the ongoing while loop handle things.\n//\n// Now say the queue has 1 element. When we dequeue the final element,\n// the queue will be empty, but we are still actively dispatching effects.\n// So you could get queue jumping in a really tricky category of cases.\n//\nvar _Platform_effectsQueue = [];\nvar _Platform_effectsActive = false;\n\n\nfunction _Platform_enqueueEffects(managers, cmdBag, subBag)\n{\n\t_Platform_effectsQueue.push({ p: managers, q: cmdBag, r: subBag });\n\n\tif (_Platform_effectsActive) return;\n\n\t_Platform_effectsActive = true;\n\tfor (var fx; fx = _Platform_effectsQueue.shift(); )\n\t{\n\t\t_Platform_dispatchEffects(fx.p, fx.q, fx.r);\n\t}\n\t_Platform_effectsActive = false;\n}\n\n\nfunction _Platform_dispatchEffects(managers, cmdBag, subBag)\n{\n\tvar effectsDict = {};\n\t_Platform_gatherEffects(true, cmdBag, effectsDict, null);\n\t_Platform_gatherEffects(false, subBag, effectsDict, null);\n\n\tfor (var home in managers)\n\t{\n\t\t_Scheduler_rawSend(managers[home], {\n\t\t\t$: 'fx',\n\t\t\ta: effectsDict[home] || { i: _List_Nil, j: _List_Nil }\n\t\t});\n\t}\n}\n\n\nfunction _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)\n{\n\tswitch (bag.$)\n\t{\n\t\tcase 1:\n\t\t\tvar home = bag.k;\n\t\t\tvar effect = _Platform_toEffect(isCmd, home, taggers, bag.l);\n\t\t\teffectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);\n\t\t\treturn;\n\n\t\tcase 2:\n\t\t\tfor (var list = bag.m; list.b; list = list.b) // WHILE_CONS\n\t\t\t{\n\t\t\t\t_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);\n\t\t\t}\n\t\t\treturn;\n\n\t\tcase 3:\n\t\t\t_Platform_gatherEffects(isCmd, bag.o, effectsDict, {\n\t\t\t\ts: bag.n,\n\t\t\t\tt: taggers\n\t\t\t});\n\t\t\treturn;\n\t}\n}\n\n\nfunction _Platform_toEffect(isCmd, home, taggers, value)\n{\n\tfunction applyTaggers(x)\n\t{\n\t\tfor (var temp = taggers; temp; temp = temp.t)\n\t\t{\n\t\t\tx = temp.s(x);\n\t\t}\n\t\treturn x;\n\t}\n\n\tvar map = isCmd\n\t\t? _Platform_effectManagers[home].e\n\t\t: _Platform_effectManagers[home].f;\n\n\treturn A2(map, applyTaggers, value)\n}\n\n\nfunction _Platform_insert(isCmd, newEffect, effects)\n{\n\teffects = effects || { i: _List_Nil, j: _List_Nil };\n\n\tisCmd\n\t\t? (effects.i = _List_Cons(newEffect, effects.i))\n\t\t: (effects.j = _List_Cons(newEffect, effects.j));\n\n\treturn effects;\n}\n\n\n\n// PORTS\n\n\nfunction _Platform_checkPortName(name)\n{\n\tif (_Platform_effectManagers[name])\n\t{\n\t\t_Debug_crash(3, name)\n\t}\n}\n\n\n\n// OUTGOING PORTS\n\n\nfunction _Platform_outgoingPort(name, converter)\n{\n\t_Platform_checkPortName(name);\n\t_Platform_effectManagers[name] = {\n\t\te: _Platform_outgoingPortMap,\n\t\tu: converter,\n\t\ta: _Platform_setupOutgoingPort\n\t};\n\treturn _Platform_leaf(name);\n}\n\n\nvar _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });\n\n\nfunction _Platform_setupOutgoingPort(name)\n{\n\tvar subs = [];\n\tvar converter = _Platform_effectManagers[name].u;\n\n\t// CREATE MANAGER\n\n\tvar init = _Process_sleep(0);\n\n\t_Platform_effectManagers[name].b = init;\n\t_Platform_effectManagers[name].c = F3(function(router, cmdList, state)\n\t{\n\t\tfor ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS\n\t\t{\n\t\t\t// grab a separate reference to subs in case unsubscribe is called\n\t\t\tvar currentSubs = subs;\n\t\t\tvar value = _Json_unwrap(converter(cmdList.a));\n\t\t\tfor (var i = 0; i < currentSubs.length; i++)\n\t\t\t{\n\t\t\t\tcurrentSubs[i](value);\n\t\t\t}\n\t\t}\n\t\treturn init;\n\t});\n\n\t// PUBLIC API\n\n\tfunction subscribe(callback)\n\t{\n\t\tsubs.push(callback);\n\t}\n\n\tfunction unsubscribe(callback)\n\t{\n\t\t// copy subs into a new array in case unsubscribe is called within a\n\t\t// subscribed callback\n\t\tsubs = subs.slice();\n\t\tvar index = subs.indexOf(callback);\n\t\tif (index >= 0)\n\t\t{\n\t\t\tsubs.splice(index, 1);\n\t\t}\n\t}\n\n\treturn {\n\t\tsubscribe: subscribe,\n\t\tunsubscribe: unsubscribe\n\t};\n}\n\n\n\n// INCOMING PORTS\n\n\nfunction _Platform_incomingPort(name, converter)\n{\n\t_Platform_checkPortName(name);\n\t_Platform_effectManagers[name] = {\n\t\tf: _Platform_incomingPortMap,\n\t\tu: converter,\n\t\ta: _Platform_setupIncomingPort\n\t};\n\treturn _Platform_leaf(name);\n}\n\n\nvar _Platform_incomingPortMap = F2(function(tagger, finalTagger)\n{\n\treturn function(value)\n\t{\n\t\treturn tagger(finalTagger(value));\n\t};\n});\n\n\nfunction _Platform_setupIncomingPort(name, sendToApp)\n{\n\tvar subs = _List_Nil;\n\tvar converter = _Platform_effectManagers[name].u;\n\n\t// CREATE MANAGER\n\n\tvar init = _Scheduler_succeed(null);\n\n\t_Platform_effectManagers[name].b = init;\n\t_Platform_effectManagers[name].c = F3(function(router, subList, state)\n\t{\n\t\tsubs = subList;\n\t\treturn init;\n\t});\n\n\t// PUBLIC API\n\n\tfunction send(incomingValue)\n\t{\n\t\tvar result = A2(_Json_run, converter, _Json_wrap(incomingValue));\n\n\t\t$elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);\n\n\t\tvar value = result.a;\n\t\tfor (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS\n\t\t{\n\t\t\tsendToApp(temp.a(value));\n\t\t}\n\t}\n\n\treturn { send: send };\n}\n\n\n\n// EXPORT ELM MODULES\n//\n// Have DEBUG and PROD versions so that we can (1) give nicer errors in\n// debug mode and (2) not pay for the bits needed for that in prod mode.\n//\n\n\nfunction _Platform_export_UNUSED(exports)\n{\n\tscope['Elm']\n\t\t? _Platform_mergeExportsProd(scope['Elm'], exports)\n\t\t: scope['Elm'] = exports;\n}\n\n\nfunction _Platform_mergeExportsProd(obj, exports)\n{\n\tfor (var name in exports)\n\t{\n\t\t(name in obj)\n\t\t\t? (name == 'init')\n\t\t\t\t? _Debug_crash(6)\n\t\t\t\t: _Platform_mergeExportsProd(obj[name], exports[name])\n\t\t\t: (obj[name] = exports[name]);\n\t}\n}\n\n\nfunction _Platform_export(exports)\n{\n\tscope['Elm']\n\t\t? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)\n\t\t: scope['Elm'] = exports;\n}\n\n\nfunction _Platform_mergeExportsDebug(moduleName, obj, exports)\n{\n\tfor (var name in exports)\n\t{\n\t\t(name in obj)\n\t\t\t? (name == 'init')\n\t\t\t\t? _Debug_crash(6, moduleName)\n\t\t\t\t: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])\n\t\t\t: (obj[name] = exports[name]);\n\t}\n}\n\n\n// CREATE\n\nvar _Regex_never = /.^/;\n\nvar _Regex_fromStringWith = F2(function(options, string)\n{\n\tvar flags = 'g';\n\tif (options.multiline) { flags += 'm'; }\n\tif (options.caseInsensitive) { flags += 'i'; }\n\n\ttry\n\t{\n\t\treturn $elm$core$Maybe$Just(new RegExp(string, flags));\n\t}\n\tcatch(error)\n\t{\n\t\treturn $elm$core$Maybe$Nothing;\n\t}\n});\n\n\n// USE\n\nvar _Regex_contains = F2(function(re, string)\n{\n\treturn string.match(re) !== null;\n});\n\n\nvar _Regex_findAtMost = F3(function(n, re, str)\n{\n\tvar out = [];\n\tvar number = 0;\n\tvar string = str;\n\tvar lastIndex = re.lastIndex;\n\tvar prevLastIndex = -1;\n\tvar result;\n\twhile (number++ < n && (result = re.exec(string)))\n\t{\n\t\tif (prevLastIndex == re.lastIndex) break;\n\t\tvar i = result.length - 1;\n\t\tvar subs = new Array(i);\n\t\twhile (i > 0)\n\t\t{\n\t\t\tvar submatch = result[i];\n\t\t\tsubs[--i] = submatch\n\t\t\t\t? $elm$core$Maybe$Just(submatch)\n\t\t\t\t: $elm$core$Maybe$Nothing;\n\t\t}\n\t\tout.push(A4($elm$regex$Regex$Match, result[0], result.index, number, _List_fromArray(subs)));\n\t\tprevLastIndex = re.lastIndex;\n\t}\n\tre.lastIndex = lastIndex;\n\treturn _List_fromArray(out);\n});\n\n\nvar _Regex_replaceAtMost = F4(function(n, re, replacer, string)\n{\n\tvar count = 0;\n\tfunction jsReplacer(match)\n\t{\n\t\tif (count++ >= n)\n\t\t{\n\t\t\treturn match;\n\t\t}\n\t\tvar i = arguments.length - 3;\n\t\tvar submatches = new Array(i);\n\t\twhile (i > 0)\n\t\t{\n\t\t\tvar submatch = arguments[i];\n\t\t\tsubmatches[--i] = submatch\n\t\t\t\t? $elm$core$Maybe$Just(submatch)\n\t\t\t\t: $elm$core$Maybe$Nothing;\n\t\t}\n\t\treturn replacer(A4($elm$regex$Regex$Match, match, arguments[arguments.length - 2], count, _List_fromArray(submatches)));\n\t}\n\treturn string.replace(re, jsReplacer);\n});\n\nvar _Regex_splitAtMost = F3(function(n, re, str)\n{\n\tvar string = str;\n\tvar out = [];\n\tvar start = re.lastIndex;\n\tvar restoreLastIndex = re.lastIndex;\n\twhile (n--)\n\t{\n\t\tvar result = re.exec(string);\n\t\tif (!result) break;\n\t\tout.push(string.slice(start, result.index));\n\t\tstart = re.lastIndex;\n\t}\n\tout.push(string.slice(start));\n\tre.lastIndex = restoreLastIndex;\n\treturn _List_fromArray(out);\n});\n\nvar _Regex_infinity = Infinity;\nvar $elm$core$List$cons = _List_cons;\nvar $elm$core$Elm$JsArray$foldr = _JsArray_foldr;\nvar $elm$core$Array$foldr = F3(\n\tfunction (func, baseCase, _v0) {\n\t\tvar tree = _v0.c;\n\t\tvar tail = _v0.d;\n\t\tvar helper = F2(\n\t\t\tfunction (node, acc) {\n\t\t\t\tif (node.$ === 'SubTree') {\n\t\t\t\t\tvar subTree = node.a;\n\t\t\t\t\treturn A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);\n\t\t\t\t} else {\n\t\t\t\t\tvar values = node.a;\n\t\t\t\t\treturn A3($elm$core$Elm$JsArray$foldr, func, acc, values);\n\t\t\t\t}\n\t\t\t});\n\t\treturn A3(\n\t\t\t$elm$core$Elm$JsArray$foldr,\n\t\t\thelper,\n\t\t\tA3($elm$core$Elm$JsArray$foldr, func, baseCase, tail),\n\t\t\ttree);\n\t});\nvar $elm$core$Array$toList = function (array) {\n\treturn A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);\n};\nvar $elm$core$Dict$foldr = F3(\n\tfunction (func, acc, t) {\n\t\tfoldr:\n\t\twhile (true) {\n\t\t\tif (t.$ === 'RBEmpty_elm_builtin') {\n\t\t\t\treturn acc;\n\t\t\t} else {\n\t\t\t\tvar key = t.b;\n\t\t\t\tvar value = t.c;\n\t\t\t\tvar left = t.d;\n\t\t\t\tvar right = t.e;\n\t\t\t\tvar $temp$func = func,\n\t\t\t\t\t$temp$acc = A3(\n\t\t\t\t\tfunc,\n\t\t\t\t\tkey,\n\t\t\t\t\tvalue,\n\t\t\t\t\tA3($elm$core$Dict$foldr, func, acc, right)),\n\t\t\t\t\t$temp$t = left;\n\t\t\t\tfunc = $temp$func;\n\t\t\t\tacc = $temp$acc;\n\t\t\t\tt = $temp$t;\n\t\t\t\tcontinue foldr;\n\t\t\t}\n\t\t}\n\t});\nvar $elm$core$Dict$toList = function (dict) {\n\treturn A3(\n\t\t$elm$core$Dict$foldr,\n\t\tF3(\n\t\t\tfunction (key, value, list) {\n\t\t\t\treturn A2(\n\t\t\t\t\t$elm$core$List$cons,\n\t\t\t\t\t_Utils_Tuple2(key, value),\n\t\t\t\t\tlist);\n\t\t\t}),\n\t\t_List_Nil,\n\t\tdict);\n};\nvar $elm$core$Dict$keys = function (dict) {\n\treturn A3(\n\t\t$elm$core$Dict$foldr,\n\t\tF3(\n\t\t\tfunction (key, value, keyList) {\n\t\t\t\treturn A2($elm$core$List$cons, key, keyList);\n\t\t\t}),\n\t\t_List_Nil,\n\t\tdict);\n};\nvar $elm$core$Set$toList = function (_v0) {\n\tvar dict = _v0.a;\n\treturn $elm$core$Dict$keys(dict);\n};\nvar $elm$core$Basics$EQ = {$: 'EQ'};\nvar $elm$core$Basics$GT = {$: 'GT'};\nvar $elm$core$Basics$LT = {$: 'LT'};\nvar $author$project$OptionList$FancyOptionList = function (a) {\n\treturn {$: 'FancyOptionList', a: a};\n};\nvar $elm$core$Result$Err = function (a) {\n\treturn {$: 'Err', a: a};\n};\nvar $elm$json$Json$Decode$Failure = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Failure', a: a, b: b};\n\t});\nvar $elm$json$Json$Decode$Field = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Field', a: a, b: b};\n\t});\nvar $elm$json$Json$Decode$Index = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Index', a: a, b: b};\n\t});\nvar $elm$core$Result$Ok = function (a) {\n\treturn {$: 'Ok', a: a};\n};\nvar $elm$json$Json$Decode$OneOf = function (a) {\n\treturn {$: 'OneOf', a: a};\n};\nvar $elm$core$Basics$False = {$: 'False'};\nvar $elm$core$Basics$add = _Basics_add;\nvar $elm$core$Maybe$Just = function (a) {\n\treturn {$: 'Just', a: a};\n};\nvar $elm$core$Maybe$Nothing = {$: 'Nothing'};\nvar $elm$core$String$all = _String_all;\nvar $elm$core$Basics$and = _Basics_and;\nvar $elm$core$Basics$append = _Utils_append;\nvar $elm$json$Json$Encode$encode = _Json_encode;\nvar $elm$core$String$fromInt = _String_fromNumber;\nvar $elm$core$String$join = F2(\n\tfunction (sep, chunks) {\n\t\treturn A2(\n\t\t\t_String_join,\n\t\t\tsep,\n\t\t\t_List_toArray(chunks));\n\t});\nvar $elm$core$String$split = F2(\n\tfunction (sep, string) {\n\t\treturn _List_fromArray(\n\t\t\tA2(_String_split, sep, string));\n\t});\nvar $elm$json$Json$Decode$indent = function (str) {\n\treturn A2(\n\t\t$elm$core$String$join,\n\t\t'\\n    ',\n\t\tA2($elm$core$String$split, '\\n', str));\n};\nvar $elm$core$List$foldl = F3(\n\tfunction (func, acc, list) {\n\t\tfoldl:\n\t\twhile (true) {\n\t\t\tif (!list.b) {\n\t\t\t\treturn acc;\n\t\t\t} else {\n\t\t\t\tvar x = list.a;\n\t\t\t\tvar xs = list.b;\n\t\t\t\tvar $temp$func = func,\n\t\t\t\t\t$temp$acc = A2(func, x, acc),\n\t\t\t\t\t$temp$list = xs;\n\t\t\t\tfunc = $temp$func;\n\t\t\t\tacc = $temp$acc;\n\t\t\t\tlist = $temp$list;\n\t\t\t\tcontinue foldl;\n\t\t\t}\n\t\t}\n\t});\nvar $elm$core$List$length = function (xs) {\n\treturn A3(\n\t\t$elm$core$List$foldl,\n\t\tF2(\n\t\t\tfunction (_v0, i) {\n\t\t\t\treturn i + 1;\n\t\t\t}),\n\t\t0,\n\t\txs);\n};\nvar $elm$core$List$map2 = _List_map2;\nvar $elm$core$Basics$le = _Utils_le;\nvar $elm$core$Basics$sub = _Basics_sub;\nvar $elm$core$List$rangeHelp = F3(\n\tfunction (lo, hi, list) {\n\t\trangeHelp:\n\t\twhile (true) {\n\t\t\tif (_Utils_cmp(lo, hi) < 1) {\n\t\t\t\tvar $temp$lo = lo,\n\t\t\t\t\t$temp$hi = hi - 1,\n\t\t\t\t\t$temp$list = A2($elm$core$List$cons, hi, list);\n\t\t\t\tlo = $temp$lo;\n\t\t\t\thi = $temp$hi;\n\t\t\t\tlist = $temp$list;\n\t\t\t\tcontinue rangeHelp;\n\t\t\t} else {\n\t\t\t\treturn list;\n\t\t\t}\n\t\t}\n\t});\nvar $elm$core$List$range = F2(\n\tfunction (lo, hi) {\n\t\treturn A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);\n\t});\nvar $elm$core$List$indexedMap = F2(\n\tfunction (f, xs) {\n\t\treturn A3(\n\t\t\t$elm$core$List$map2,\n\t\t\tf,\n\t\t\tA2(\n\t\t\t\t$elm$core$List$range,\n\t\t\t\t0,\n\t\t\t\t$elm$core$List$length(xs) - 1),\n\t\t\txs);\n\t});\nvar $elm$core$Char$toCode = _Char_toCode;\nvar $elm$core$Char$isLower = function (_char) {\n\tvar code = $elm$core$Char$toCode(_char);\n\treturn (97 <= code) && (code <= 122);\n};\nvar $elm$core$Char$isUpper = function (_char) {\n\tvar code = $elm$core$Char$toCode(_char);\n\treturn (code <= 90) && (65 <= code);\n};\nvar $elm$core$Basics$or = _Basics_or;\nvar $elm$core$Char$isAlpha = function (_char) {\n\treturn $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);\n};\nvar $elm$core$Char$isDigit = function (_char) {\n\tvar code = $elm$core$Char$toCode(_char);\n\treturn (code <= 57) && (48 <= code);\n};\nvar $elm$core$Char$isAlphaNum = function (_char) {\n\treturn $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));\n};\nvar $elm$core$List$reverse = function (list) {\n\treturn A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);\n};\nvar $elm$core$String$uncons = _String_uncons;\nvar $elm$json$Json$Decode$errorOneOf = F2(\n\tfunction (i, error) {\n\t\treturn '\\n\\n(' + ($elm$core$String$fromInt(i + 1) + (') ' + $elm$json$Json$Decode$indent(\n\t\t\t$elm$json$Json$Decode$errorToString(error))));\n\t});\nvar $elm$json$Json$Decode$errorToString = function (error) {\n\treturn A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);\n};\nvar $elm$json$Json$Decode$errorToStringHelp = F2(\n\tfunction (error, context) {\n\t\terrorToStringHelp:\n\t\twhile (true) {\n\t\t\tswitch (error.$) {\n\t\t\t\tcase 'Field':\n\t\t\t\t\tvar f = error.a;\n\t\t\t\t\tvar err = error.b;\n\t\t\t\t\tvar isSimple = function () {\n\t\t\t\t\t\tvar _v1 = $elm$core$String$uncons(f);\n\t\t\t\t\t\tif (_v1.$ === 'Nothing') {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar _v2 = _v1.a;\n\t\t\t\t\t\t\tvar _char = _v2.a;\n\t\t\t\t\t\t\tvar rest = _v2.b;\n\t\t\t\t\t\t\treturn $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);\n\t\t\t\t\t\t}\n\t\t\t\t\t}();\n\t\t\t\t\tvar fieldName = isSimple ? ('.' + f) : ('[\\'' + (f + '\\']'));\n\t\t\t\t\tvar $temp$error = err,\n\t\t\t\t\t\t$temp$context = A2($elm$core$List$cons, fieldName, context);\n\t\t\t\t\terror = $temp$error;\n\t\t\t\t\tcontext = $temp$context;\n\t\t\t\t\tcontinue errorToStringHelp;\n\t\t\t\tcase 'Index':\n\t\t\t\t\tvar i = error.a;\n\t\t\t\t\tvar err = error.b;\n\t\t\t\t\tvar indexName = '[' + ($elm$core$String$fromInt(i) + ']');\n\t\t\t\t\tvar $temp$error = err,\n\t\t\t\t\t\t$temp$context = A2($elm$core$List$cons, indexName, context);\n\t\t\t\t\terror = $temp$error;\n\t\t\t\t\tcontext = $temp$context;\n\t\t\t\t\tcontinue errorToStringHelp;\n\t\t\t\tcase 'OneOf':\n\t\t\t\t\tvar errors = error.a;\n\t\t\t\t\tif (!errors.b) {\n\t\t\t\t\t\treturn 'Ran into a Json.Decode.oneOf with no possibilities' + function () {\n\t\t\t\t\t\t\tif (!context.b) {\n\t\t\t\t\t\t\t\treturn '!';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn ' at json' + A2(\n\t\t\t\t\t\t\t\t\t$elm$core$String$join,\n\t\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\t\t$elm$core$List$reverse(context));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!errors.b.b) {\n\t\t\t\t\t\t\tvar err = errors.a;\n\t\t\t\t\t\t\tvar $temp$error = err,\n\t\t\t\t\t\t\t\t$temp$context = context;\n\t\t\t\t\t\t\terror = $temp$error;\n\t\t\t\t\t\t\tcontext = $temp$context;\n\t\t\t\t\t\t\tcontinue errorToStringHelp;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar starter = function () {\n\t\t\t\t\t\t\t\tif (!context.b) {\n\t\t\t\t\t\t\t\t\treturn 'Json.Decode.oneOf';\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn 'The Json.Decode.oneOf at json' + A2(\n\t\t\t\t\t\t\t\t\t\t$elm$core$String$join,\n\t\t\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\t\t\t$elm$core$List$reverse(context));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}();\n\t\t\t\t\t\t\tvar introduction = starter + (' failed in the following ' + ($elm$core$String$fromInt(\n\t\t\t\t\t\t\t\t$elm$core$List$length(errors)) + ' ways:'));\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t$elm$core$String$join,\n\t\t\t\t\t\t\t\t'\\n\\n',\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t$elm$core$List$cons,\n\t\t\t\t\t\t\t\t\tintroduction,\n\t\t\t\t\t\t\t\t\tA2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tvar msg = error.a;\n\t\t\t\t\tvar json = error.b;\n\t\t\t\t\tvar introduction = function () {\n\t\t\t\t\t\tif (!context.b) {\n\t\t\t\t\t\t\treturn 'Problem with the given value:\\n\\n';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn 'Problem with the value at json' + (A2(\n\t\t\t\t\t\t\t\t$elm$core$String$join,\n\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\t$elm$core$List$reverse(context)) + ':\\n\\n    ');\n\t\t\t\t\t\t}\n\t\t\t\t\t}();\n\t\t\t\t\treturn introduction + ($elm$json$Json$Decode$indent(\n\t\t\t\t\t\tA2($elm$json$Json$Encode$encode, 4, json)) + ('\\n\\n' + msg));\n\t\t\t}\n\t\t}\n\t});\nvar $elm$core$Array$branchFactor = 32;\nvar $elm$core$Array$Array_elm_builtin = F4(\n\tfunction (a, b, c, d) {\n\t\treturn {$: 'Array_elm_builtin', a: a, b: b, c: c, d: d};\n\t});\nvar $elm$core$Elm$JsArray$empty = _JsArray_empty;\nvar $elm$core$Basics$ceiling = _Basics_ceiling;\nvar $elm$core$Basics$fdiv = _Basics_fdiv;\nvar $elm$core$Basics$logBase = F2(\n\tfunction (base, number) {\n\t\treturn _Basics_log(number) / _Basics_log(base);\n\t});\nvar $elm$core$Basics$toFloat = _Basics_toFloat;\nvar $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(\n\tA2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor));\nvar $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);\nvar $elm$core$Elm$JsArray$initialize = _JsArray_initialize;\nvar $elm$core$Array$Leaf = function (a) {\n\treturn {$: 'Leaf', a: a};\n};\nvar $elm$core$Basics$apL = F2(\n\tfunction (f, x) {\n\t\treturn f(x);\n\t});\nvar $elm$core$Basics$apR = F2(\n\tfunction (x, f) {\n\t\treturn f(x);\n\t});\nvar $elm$core$Basics$eq = _Utils_equal;\nvar $elm$core$Basics$floor = _Basics_floor;\nvar $elm$core$Elm$JsArray$length = _JsArray_length;\nvar $elm$core$Basics$gt = _Utils_gt;\nvar $elm$core$Basics$max = F2(\n\tfunction (x, y) {\n\t\treturn (_Utils_cmp(x, y) > 0) ? x : y;\n\t});\nvar $elm$core$Basics$mul = _Basics_mul;\nvar $elm$core$Array$SubTree = function (a) {\n\treturn {$: 'SubTree', a: a};\n};\nvar $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;\nvar $elm$core$Array$compressNodes = F2(\n\tfunction (nodes, acc) {\n\t\tcompressNodes:\n\t\twhile (true) {\n\t\t\tvar _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);\n\t\t\tvar node = _v0.a;\n\t\t\tvar remainingNodes = _v0.b;\n\t\t\tvar newAcc = A2(\n\t\t\t\t$elm$core$List$cons,\n\t\t\t\t$elm$core$Array$SubTree(node),\n\t\t\t\tacc);\n\t\t\tif (!remainingNodes.b) {\n\t\t\t\treturn $elm$core$List$reverse(newAcc);\n\t\t\t} else {\n\t\t\t\tvar $temp$nodes = remainingNodes,\n\t\t\t\t\t$temp$acc = newAcc;\n\t\t\t\tnodes = $temp$nodes;\n\t\t\t\tacc = $temp$acc;\n\t\t\t\tcontinue compressNodes;\n\t\t\t}\n\t\t}\n\t});\nvar $elm$core$Tuple$first = function (_v0) {\n\tvar x = _v0.a;\n\treturn x;\n};\nvar $elm$core$Array$treeFromBuilder = F2(\n\tfunction (nodeList, nodeListSize) {\n\t\ttreeFromBuilder:\n\t\twhile (true) {\n\t\t\tvar newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);\n\t\t\tif (newNodeSize === 1) {\n\t\t\t\treturn A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;\n\t\t\t} else {\n\t\t\t\tvar $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil),\n\t\t\t\t\t$temp$nodeListSize = newNodeSize;\n\t\t\t\tnodeList = $temp$nodeList;\n\t\t\t\tnodeListSize = $temp$nodeListSize;\n\t\t\t\tcontinue treeFromBuilder;\n\t\t\t}\n\t\t}\n\t});\nvar $elm$core$Array$builderToArray = F2(\n\tfunction (reverseNodeList, builder) {\n\t\tif (!builder.nodeListSize) {\n\t\t\treturn A4(\n\t\t\t\t$elm$core$Array$Array_elm_builtin,\n\t\t\t\t$elm$core$Elm$JsArray$length(builder.tail),\n\t\t\t\t$elm$core$Array$shiftStep,\n\t\t\t\t$elm$core$Elm$JsArray$empty,\n\t\t\t\tbuilder.tail);\n\t\t} else {\n\t\t\tvar treeLen = builder.nodeListSize * $elm$core$Array$branchFactor;\n\t\t\tvar depth = $elm$core$Basics$floor(\n\t\t\t\tA2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1));\n\t\t\tvar correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.nodeList) : builder.nodeList;\n\t\t\tvar tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.nodeListSize);\n\t\t\treturn A4(\n\t\t\t\t$elm$core$Array$Array_elm_builtin,\n\t\t\t\t$elm$core$Elm$JsArray$length(builder.tail) + treeLen,\n\t\t\t\tA2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep),\n\t\t\t\ttree,\n\t\t\t\tbuilder.tail);\n\t\t}\n\t});\nvar $elm$core$Basics$idiv = _Basics_idiv;\nvar $elm$core$Basics$lt = _Utils_lt;\nvar $elm$core$Array$initializeHelp = F5(\n\tfunction (fn, fromIndex, len, nodeList, tail) {\n\t\tinitializeHelp:\n\t\twhile (true) {\n\t\t\tif (fromIndex < 0) {\n\t\t\t\treturn A2(\n\t\t\t\t\t$elm$core$Array$builderToArray,\n\t\t\t\t\tfalse,\n\t\t\t\t\t{nodeList: nodeList, nodeListSize: (len / $elm$core$Array$branchFactor) | 0, tail: tail});\n\t\t\t} else {\n\t\t\t\tvar leaf = $elm$core$Array$Leaf(\n\t\t\t\t\tA3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn));\n\t\t\t\tvar $temp$fn = fn,\n\t\t\t\t\t$temp$fromIndex = fromIndex - $elm$core$Array$branchFactor,\n\t\t\t\t\t$temp$len = len,\n\t\t\t\t\t$temp$nodeList = A2($elm$core$List$cons, leaf, nodeList),\n\t\t\t\t\t$temp$tail = tail;\n\t\t\t\tfn = $temp$fn;\n\t\t\t\tfromIndex = $temp$fromIndex;\n\t\t\t\tlen = $temp$len;\n\t\t\t\tnodeList = $temp$nodeList;\n\t\t\t\ttail = $temp$tail;\n\t\t\t\tcontinue initializeHelp;\n\t\t\t}\n\t\t}\n\t});\nvar $elm$core$Basics$remainderBy = _Basics_remainderBy;\nvar $elm$core$Array$initialize = F2(\n\tfunction (len, fn) {\n\t\tif (len <= 0) {\n\t\t\treturn $elm$core$Array$empty;\n\t\t} else {\n\t\t\tvar tailLen = len % $elm$core$Array$branchFactor;\n\t\t\tvar tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);\n\t\t\tvar initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;\n\t\t\treturn A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);\n\t\t}\n\t});\nvar $elm$core$Basics$True = {$: 'True'};\nvar $elm$core$Result$isOk = function (result) {\n\tif (result.$ === 'Ok') {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n};\nvar $elm$core$Platform$Cmd$batch = _Platform_batch;\nvar $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);\nvar $author$project$FilterWorker$init = function (_v0) {\n\treturn _Utils_Tuple2(\n\t\t$author$project$OptionList$FancyOptionList(_List_Nil),\n\t\t$elm$core$Platform$Cmd$none);\n};\nvar $author$project$FilterWorker$UpdateOptions = function (a) {\n\treturn {$: 'UpdateOptions', a: a};\n};\nvar $author$project$FilterWorker$UpdateSearchString = function (a) {\n\treturn {$: 'UpdateSearchString', a: a};\n};\nvar $elm$core$Platform$Sub$batch = _Platform_batch;\nvar $elm$json$Json$Decode$value = _Json_decodeValue;\nvar $author$project$FilterWorker$receiveOptions = _Platform_incomingPort('receiveOptions', $elm$json$Json$Decode$value);\nvar $author$project$FilterWorker$receiveSearchString = _Platform_incomingPort('receiveSearchString', $elm$json$Json$Decode$value);\nvar $author$project$FilterWorker$subscriptions = function (_v0) {\n\treturn $elm$core$Platform$Sub$batch(\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\t$author$project$FilterWorker$receiveOptions($author$project$FilterWorker$UpdateOptions),\n\t\t\t\t$author$project$FilterWorker$receiveSearchString($author$project$FilterWorker$UpdateSearchString)\n\t\t\t]));\n};\nvar $elm$json$Json$Decode$succeed = _Json_succeed;\nvar $author$project$SelectionMode$CustomHtml = {$: 'CustomHtml'};\nvar $author$project$OptionSearcher$SearchParams = F4(\n\tfunction (searchString, searchStringMinimumLength, searchNonce, clearingSearch) {\n\t\treturn {clearingSearch: clearingSearch, searchNonce: searchNonce, searchString: searchString, searchStringMinimumLength: searchStringMinimumLength};\n\t});\nvar $elm$json$Json$Decode$bool = _Json_decodeBool;\nvar $author$project$SearchString$SearchString = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'SearchString', a: a, b: b};\n\t});\nvar $elm$json$Json$Decode$map2 = _Json_map2;\nvar $elm$json$Json$Decode$string = _Json_decodeString;\nvar $author$project$SearchString$decode = A3(\n\t$elm$json$Json$Decode$map2,\n\t$author$project$SearchString$SearchString,\n\t$elm$json$Json$Decode$string,\n\t$elm$json$Json$Decode$succeed(true));\nvar $author$project$OutputStyle$FixedSearchStringMinimumLength = function (a) {\n\treturn {$: 'FixedSearchStringMinimumLength', a: a};\n};\nvar $author$project$OutputStyle$NoMinimumToSearchStringLength = {$: 'NoMinimumToSearchStringLength'};\nvar $elm$json$Json$Decode$andThen = _Json_andThen;\nvar $elm$json$Json$Decode$fail = _Json_fail;\nvar $elm$json$Json$Decode$int = _Json_decodeInt;\nvar $elm$core$Basics$identity = function (x) {\n\treturn x;\n};\nvar $author$project$PositiveInt$PositiveInt = function (a) {\n\treturn {$: 'PositiveInt', a: a};\n};\nvar $elm$core$Basics$ge = _Utils_ge;\nvar $author$project$PositiveInt$maybeNew = function (_int) {\n\treturn (_int >= 0) ? $elm$core$Maybe$Just(\n\t\t$author$project$PositiveInt$PositiveInt(_int)) : $elm$core$Maybe$Nothing;\n};\nvar $author$project$PositiveInt$decode = A2(\n\t$elm$json$Json$Decode$andThen,\n\tfunction (_int) {\n\t\tvar _v0 = $author$project$PositiveInt$maybeNew(_int);\n\t\tif (_v0.$ === 'Just') {\n\t\t\tvar positiveInt = _v0.a;\n\t\t\treturn $elm$json$Json$Decode$succeed(positiveInt);\n\t\t} else {\n\t\t\treturn $elm$json$Json$Decode$fail(\n\t\t\t\t'This is not a positive int ' + $elm$core$String$fromInt(_int));\n\t\t}\n\t},\n\t$elm$json$Json$Decode$int);\nvar $author$project$PositiveInt$isZero = function (_v0) {\n\tvar positiveInt = _v0.a;\n\treturn !positiveInt;\n};\nvar $author$project$OutputStyle$decodeSearchStringMinimumLength = A2(\n\t$elm$json$Json$Decode$andThen,\n\tfunction (positiveInt) {\n\t\treturn $author$project$PositiveInt$isZero(positiveInt) ? $elm$json$Json$Decode$succeed($author$project$OutputStyle$NoMinimumToSearchStringLength) : $elm$json$Json$Decode$succeed(\n\t\t\t$author$project$OutputStyle$FixedSearchStringMinimumLength(positiveInt));\n\t},\n\t$author$project$PositiveInt$decode);\nvar $elm$json$Json$Decode$field = _Json_decodeField;\nvar $elm$json$Json$Decode$map4 = _Json_map4;\nvar $author$project$OptionSearcher$decodeSearchParams = A5(\n\t$elm$json$Json$Decode$map4,\n\t$author$project$OptionSearcher$SearchParams,\n\tA2($elm$json$Json$Decode$field, 'searchString', $author$project$SearchString$decode),\n\tA2($elm$json$Json$Decode$field, 'searchStringMinimumLength', $author$project$OutputStyle$decodeSearchStringMinimumLength),\n\tA2($elm$json$Json$Decode$field, 'searchNonce', $elm$json$Json$Decode$int),\n\tA2($elm$json$Json$Decode$field, 'isClearingSearch', $elm$json$Json$Decode$bool));\nvar $elm$json$Json$Decode$decodeValue = _Json_run;\nvar $author$project$OptionDisplay$MatureOption = {$: 'MatureOption'};\nvar $author$project$Option$DatalistOption = function (a) {\n\treturn {$: 'DatalistOption', a: a};\n};\nvar $author$project$OptionList$DatalistOptionList = function (a) {\n\treturn {$: 'DatalistOptionList', a: a};\n};\nvar $author$project$OptionList$SlottedOptionList = function (a) {\n\treturn {$: 'SlottedOptionList', a: a};\n};\nvar $author$project$DatalistOption$DatalistOption = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'DatalistOption', a: a, b: b};\n\t});\nvar $author$project$OptionDisplay$OptionDisabled = function (a) {\n\treturn {$: 'OptionDisabled', a: a};\n};\nvar $author$project$OptionDisplay$OptionSelected = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'OptionSelected', a: a, b: b};\n\t});\nvar $author$project$OptionDisplay$OptionShown = function (a) {\n\treturn {$: 'OptionShown', a: a};\n};\nvar $elm$json$Json$Decode$oneOf = _Json_oneOf;\nvar $author$project$OptionDisplay$decoder = function (age) {\n\treturn $elm$json$Json$Decode$oneOf(\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\t$elm$json$Json$Decode$andThen,\n\t\t\t\tfunction (str) {\n\t\t\t\t\tif (str === 'true') {\n\t\t\t\t\t\treturn $elm$json$Json$Decode$succeed(\n\t\t\t\t\t\t\tA2($author$project$OptionDisplay$OptionSelected, 0, age));\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn $elm$json$Json$Decode$fail('Option is not selected');\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tA2($elm$json$Json$Decode$field, 'selected', $elm$json$Json$Decode$string)),\n\t\t\t\tA2(\n\t\t\t\t$elm$json$Json$Decode$andThen,\n\t\t\t\tfunction (isSelected_) {\n\t\t\t\t\treturn isSelected_ ? $elm$json$Json$Decode$succeed(\n\t\t\t\t\t\tA2($author$project$OptionDisplay$OptionSelected, 0, age)) : $elm$json$Json$Decode$succeed(\n\t\t\t\t\t\t$author$project$OptionDisplay$OptionShown(age));\n\t\t\t\t},\n\t\t\t\tA2($elm$json$Json$Decode$field, 'selected', $elm$json$Json$Decode$bool)),\n\t\t\t\tA2(\n\t\t\t\t$elm$json$Json$Decode$andThen,\n\t\t\t\tfunction (isDisabled) {\n\t\t\t\t\treturn isDisabled ? $elm$json$Json$Decode$succeed(\n\t\t\t\t\t\t$author$project$OptionDisplay$OptionDisabled(age)) : $elm$json$Json$Decode$fail('Option is not disabled');\n\t\t\t\t},\n\t\t\t\tA2($elm$json$Json$Decode$field, 'disabled', $elm$json$Json$Decode$bool)),\n\t\t\t\t$elm$json$Json$Decode$succeed(\n\t\t\t\t$author$project$OptionDisplay$OptionShown(age))\n\t\t\t]));\n};\nvar $author$project$OptionValue$EmptyOptionValue = {$: 'EmptyOptionValue'};\nvar $author$project$OptionValue$OptionValue = function (a) {\n\treturn {$: 'OptionValue', a: a};\n};\nvar $elm$core$String$trim = _String_trim;\nvar $author$project$OptionValue$decoder = A2(\n\t$elm$json$Json$Decode$andThen,\n\tfunction (valueStr) {\n\t\tvar _v0 = $elm$core$String$trim(valueStr);\n\t\tif (_v0 === '') {\n\t\t\treturn $elm$json$Json$Decode$succeed($author$project$OptionValue$EmptyOptionValue);\n\t\t} else {\n\t\t\tvar str = _v0;\n\t\t\treturn $elm$json$Json$Decode$succeed(\n\t\t\t\t$author$project$OptionValue$OptionValue(str));\n\t\t}\n\t},\n\t$elm$json$Json$Decode$string);\nvar $author$project$DatalistOption$decoder = A3(\n\t$elm$json$Json$Decode$map2,\n\t$author$project$DatalistOption$DatalistOption,\n\t$author$project$OptionDisplay$decoder($author$project$OptionDisplay$MatureOption),\n\tA2($elm$json$Json$Decode$field, 'value', $author$project$OptionValue$decoder));\nvar $author$project$Option$FancyOption = function (a) {\n\treturn {$: 'FancyOption', a: a};\n};\nvar $author$project$Option$SlottedOption = function (a) {\n\treturn {$: 'SlottedOption', a: a};\n};\nvar $author$project$FancyOption$EmptyFancyOption = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'EmptyFancyOption', a: a, b: b};\n\t});\nvar $author$project$OptionLabel$OptionLabel = F3(\n\tfunction (a, b, c) {\n\t\treturn {$: 'OptionLabel', a: a, b: b, c: c};\n\t});\nvar $elm$json$Json$Decode$map3 = _Json_map3;\nvar $elm$json$Json$Decode$map = _Json_map1;\nvar $elm$json$Json$Decode$null = _Json_decodeNull;\nvar $elm$json$Json$Decode$nullable = function (decoder) {\n\treturn $elm$json$Json$Decode$oneOf(\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\t$elm$json$Json$Decode$null($elm$core$Maybe$Nothing),\n\t\t\t\tA2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder)\n\t\t\t]));\n};\nvar $author$project$SortRank$Auto = function (a) {\n\treturn {$: 'Auto', a: a};\n};\nvar $author$project$SortRank$Manual = function (a) {\n\treturn {$: 'Manual', a: a};\n};\nvar $author$project$SortRank$NoSortRank = {$: 'NoSortRank'};\nvar $author$project$SortRank$sortRankDecoder = $elm$json$Json$Decode$oneOf(\n\t_List_fromArray(\n\t\t[\n\t\t\tA2(\n\t\t\t$elm$json$Json$Decode$andThen,\n\t\t\tfunction (_int) {\n\t\t\t\tvar _v0 = $author$project$PositiveInt$maybeNew(_int);\n\t\t\t\tif (_v0.$ === 'Just') {\n\t\t\t\t\tvar positiveInt = _v0.a;\n\t\t\t\t\treturn $elm$json$Json$Decode$succeed(\n\t\t\t\t\t\t$author$project$SortRank$Auto(positiveInt));\n\t\t\t\t} else {\n\t\t\t\t\treturn $elm$json$Json$Decode$fail('The index must be a positive number.');\n\t\t\t\t}\n\t\t\t},\n\t\t\tA2($elm$json$Json$Decode$field, 'index', $elm$json$Json$Decode$int)),\n\t\t\tA2(\n\t\t\t$elm$json$Json$Decode$andThen,\n\t\t\tfunction (_int) {\n\t\t\t\tvar _v1 = $author$project$PositiveInt$maybeNew(_int);\n\t\t\t\tif (_v1.$ === 'Just') {\n\t\t\t\t\tvar positiveInt = _v1.a;\n\t\t\t\t\treturn $elm$json$Json$Decode$succeed(\n\t\t\t\t\t\t$author$project$SortRank$Manual(positiveInt));\n\t\t\t\t} else {\n\t\t\t\t\treturn $elm$json$Json$Decode$fail('The weight must be a positive number.');\n\t\t\t\t}\n\t\t\t},\n\t\t\tA2($elm$json$Json$Decode$field, 'weight', $elm$json$Json$Decode$int)),\n\t\t\t$elm$json$Json$Decode$succeed($author$project$SortRank$NoSortRank)\n\t\t]));\nvar $author$project$OptionLabel$labelDecoder = A4(\n\t$elm$json$Json$Decode$map3,\n\t$author$project$OptionLabel$OptionLabel,\n\tA2($elm$json$Json$Decode$field, 'label', $elm$json$Json$Decode$string),\n\tA2(\n\t\t$elm$json$Json$Decode$field,\n\t\t'labelClean',\n\t\t$elm$json$Json$Decode$nullable($elm$json$Json$Decode$string)),\n\t$author$project$SortRank$sortRankDecoder);\nvar $author$project$FancyOption$decodeEmptyOptionValue = function (age) {\n\treturn A2(\n\t\t$elm$json$Json$Decode$andThen,\n\t\tfunction (value) {\n\t\t\tif (value.$ === 'OptionValue') {\n\t\t\t\treturn $elm$json$Json$Decode$fail('It can not be an option without a value because it has a value.');\n\t\t\t} else {\n\t\t\t\treturn A3(\n\t\t\t\t\t$elm$json$Json$Decode$map2,\n\t\t\t\t\t$author$project$FancyOption$EmptyFancyOption,\n\t\t\t\t\t$author$project$OptionDisplay$decoder(age),\n\t\t\t\t\t$author$project$OptionLabel$labelDecoder);\n\t\t\t}\n\t\t},\n\t\tA2($elm$json$Json$Decode$field, 'value', $author$project$OptionValue$decoder));\n};\nvar $author$project$FancyOption$FancyOption = F7(\n\tfunction (a, b, c, d, e, f, g) {\n\t\treturn {$: 'FancyOption', a: a, b: b, c: c, d: d, e: e, f: f, g: g};\n\t});\nvar $author$project$OptionDescription$NoDescription = {$: 'NoDescription'};\nvar $author$project$OptionDescription$OptionDescription = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'OptionDescription', a: a, b: b};\n\t});\nvar $author$project$OptionDescription$decoder = $elm$json$Json$Decode$oneOf(\n\t_List_fromArray(\n\t\t[\n\t\t\tA3(\n\t\t\t$elm$json$Json$Decode$map2,\n\t\t\t$author$project$OptionDescription$OptionDescription,\n\t\t\tA2($elm$json$Json$Decode$field, 'description', $elm$json$Json$Decode$string),\n\t\t\tA2(\n\t\t\t\t$elm$json$Json$Decode$field,\n\t\t\t\t'descriptionClean',\n\t\t\t\t$elm$json$Json$Decode$nullable($elm$json$Json$Decode$string))),\n\t\t\t$elm$json$Json$Decode$succeed($author$project$OptionDescription$NoDescription)\n\t\t]));\nvar $author$project$OptionGroup$NoOptionGroup = {$: 'NoOptionGroup'};\nvar $author$project$OptionGroup$OptionGroup = function (a) {\n\treturn {$: 'OptionGroup', a: a};\n};\nvar $author$project$OptionGroup$decoder = $elm$json$Json$Decode$oneOf(\n\t_List_fromArray(\n\t\t[\n\t\t\tA2(\n\t\t\t$elm$json$Json$Decode$map,\n\t\t\t$author$project$OptionGroup$OptionGroup,\n\t\t\tA2($elm$json$Json$Decode$field, 'group', $elm$json$Json$Decode$string)),\n\t\t\t$elm$json$Json$Decode$succeed($author$project$OptionGroup$NoOptionGroup)\n\t\t]));\nvar $elm$json$Json$Decode$map7 = _Json_map7;\nvar $author$project$OptionPart$OptionPart = function (a) {\n\treturn {$: 'OptionPart', a: a};\n};\nvar $elm$core$Basics$always = F2(\n\tfunction (a, _v0) {\n\t\treturn a;\n\t});\nvar $elm$core$String$append = _String_append;\nvar $elm$core$Basics$composeR = F3(\n\tfunction (f, g, x) {\n\t\treturn g(\n\t\t\tf(x));\n\t});\nvar $elm$regex$Regex$Match = F4(\n\tfunction (match, index, number, submatches) {\n\t\treturn {index: index, match: match, number: number, submatches: submatches};\n\t});\nvar $elm$regex$Regex$fromStringWith = _Regex_fromStringWith;\nvar $elm$regex$Regex$fromString = function (string) {\n\treturn A2(\n\t\t$elm$regex$Regex$fromStringWith,\n\t\t{caseInsensitive: false, multiline: false},\n\t\tstring);\n};\nvar $elm$regex$Regex$never = _Regex_never;\nvar $elm$core$Maybe$withDefault = F2(\n\tfunction (_default, maybe) {\n\t\tif (maybe.$ === 'Just') {\n\t\t\tvar value = maybe.a;\n\t\t\treturn value;\n\t\t} else {\n\t\t\treturn _default;\n\t\t}\n\t});\nvar $elm_community$string_extra$String$Extra$regexFromString = A2(\n\t$elm$core$Basics$composeR,\n\t$elm$regex$Regex$fromString,\n\t$elm$core$Maybe$withDefault($elm$regex$Regex$never));\nvar $elm$regex$Regex$replace = _Regex_replaceAtMost(_Regex_infinity);\nvar $elm$core$String$toLower = _String_toLower;\nvar $elm_community$string_extra$String$Extra$dasherize = function (string) {\n\treturn $elm$core$String$toLower(\n\t\tA3(\n\t\t\t$elm$regex$Regex$replace,\n\t\t\t$elm_community$string_extra$String$Extra$regexFromString('[_-\\\\s]+'),\n\t\t\t$elm$core$Basics$always('-'),\n\t\t\tA3(\n\t\t\t\t$elm$regex$Regex$replace,\n\t\t\t\t$elm_community$string_extra$String$Extra$regexFromString('([A-Z])'),\n\t\t\t\tA2(\n\t\t\t\t\t$elm$core$Basics$composeR,\n\t\t\t\t\tfunction ($) {\n\t\t\t\t\t\treturn $.match;\n\t\t\t\t\t},\n\t\t\t\t\t$elm$core$String$append('-')),\n\t\t\t\t$elm$core$String$trim(string))));\n};\nvar $author$project$OptionPart$fromString = function (string) {\n\tvar partString = $elm_community$string_extra$String$Extra$dasherize(\n\t\t$elm$core$String$trim(string));\n\tif (partString === '') {\n\t\treturn $elm$core$Maybe$Nothing;\n\t} else {\n\t\treturn $elm$core$Maybe$Just(\n\t\t\t$author$project$OptionPart$OptionPart(string));\n\t}\n};\nvar $author$project$OptionPart$valueDecoder = A2(\n\t$elm$json$Json$Decode$andThen,\n\tfunction (s) {\n\t\tvar _v0 = $author$project$OptionPart$fromString(s);\n\t\tif (_v0.$ === 'Nothing') {\n\t\t\treturn $elm$json$Json$Decode$fail('The value is empty so we are unable to make a part of the value');\n\t\t} else {\n\t\t\tvar part = _v0.a;\n\t\t\treturn $elm$json$Json$Decode$succeed(part);\n\t\t}\n\t},\n\t$elm$json$Json$Decode$string);\nvar $author$project$FancyOption$decoderOptionWithAValue = function (age) {\n\treturn A8(\n\t\t$elm$json$Json$Decode$map7,\n\t\t$author$project$FancyOption$FancyOption,\n\t\t$author$project$OptionDisplay$decoder(age),\n\t\t$author$project$OptionLabel$labelDecoder,\n\t\tA2($elm$json$Json$Decode$field, 'value', $author$project$OptionValue$decoder),\n\t\t$author$project$OptionDescription$decoder,\n\t\t$author$project$OptionGroup$decoder,\n\t\tA2($elm$json$Json$Decode$field, 'value', $author$project$OptionPart$valueDecoder),\n\t\t$elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing));\n};\nvar $author$project$OptionPart$decoder = A2(\n\t$elm$json$Json$Decode$andThen,\n\tfunction (s) {\n\t\treturn _Utils_eq(\n\t\t\ts,\n\t\t\t$elm_community$string_extra$String$Extra$dasherize(s)) ? $elm$json$Json$Decode$succeed(\n\t\t\t$author$project$OptionPart$OptionPart(s)) : $elm$json$Json$Decode$fail('Invalid option part: ' + s);\n\t},\n\t$elm$json$Json$Decode$string);\nvar $author$project$FancyOption$decoderOptionWithAValueAndPart = function (age) {\n\treturn A8(\n\t\t$elm$json$Json$Decode$map7,\n\t\t$author$project$FancyOption$FancyOption,\n\t\t$author$project$OptionDisplay$decoder(age),\n\t\t$author$project$OptionLabel$labelDecoder,\n\t\tA2($elm$json$Json$Decode$field, 'value', $author$project$OptionValue$decoder),\n\t\t$author$project$OptionDescription$decoder,\n\t\t$author$project$OptionGroup$decoder,\n\t\tA2($elm$json$Json$Decode$field, 'part', $author$project$OptionPart$decoder),\n\t\t$elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing));\n};\nvar $author$project$FancyOption$decoderWithAge = function (optionAge) {\n\treturn $elm$json$Json$Decode$oneOf(\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\t$author$project$FancyOption$decodeEmptyOptionValue(optionAge),\n\t\t\t\t$author$project$FancyOption$decoderOptionWithAValueAndPart(optionAge),\n\t\t\t\t$author$project$FancyOption$decoderOptionWithAValue(optionAge)\n\t\t\t]));\n};\nvar $author$project$SlottedOption$SlottedOption = F3(\n\tfunction (a, b, c) {\n\t\treturn {$: 'SlottedOption', a: a, b: b, c: c};\n\t});\nvar $author$project$OptionSlot$OptionSlot = function (a) {\n\treturn {$: 'OptionSlot', a: a};\n};\nvar $author$project$OptionSlot$decoder = A2($elm$json$Json$Decode$map, $author$project$OptionSlot$OptionSlot, $elm$json$Json$Decode$string);\nvar $author$project$SlottedOption$decoderWithAge = function (age) {\n\treturn A4(\n\t\t$elm$json$Json$Decode$map3,\n\t\t$author$project$SlottedOption$SlottedOption,\n\t\t$author$project$OptionDisplay$decoder(age),\n\t\tA2($elm$json$Json$Decode$field, 'value', $author$project$OptionValue$decoder),\n\t\tA2($elm$json$Json$Decode$field, 'slot', $author$project$OptionSlot$decoder));\n};\nvar $author$project$Option$decoderWithAgeAndOutputStyle = F2(\n\tfunction (optionAge, outputStyle) {\n\t\tif (outputStyle.$ === 'CustomHtml') {\n\t\t\treturn $elm$json$Json$Decode$oneOf(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t$elm$json$Json$Decode$map,\n\t\t\t\t\t\t$author$project$Option$FancyOption,\n\t\t\t\t\t\t$author$project$FancyOption$decoderWithAge(optionAge)),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t$elm$json$Json$Decode$map,\n\t\t\t\t\t\t$author$project$Option$SlottedOption,\n\t\t\t\t\t\t$author$project$SlottedOption$decoderWithAge(optionAge))\n\t\t\t\t\t]));\n\t\t} else {\n\t\t\treturn A2($elm$json$Json$Decode$map, $author$project$Option$DatalistOption, $author$project$DatalistOption$decoder);\n\t\t}\n\t});\nvar $elm$core$List$any = F2(\n\tfunction (isOkay, list) {\n\t\tany:\n\t\twhile (true) {\n\t\t\tif (!list.b) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tvar x = list.a;\n\t\t\t\tvar xs = list.b;\n\t\t\t\tif (isOkay(x)) {\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\tvar $temp$isOkay = isOkay,\n\t\t\t\t\t\t$temp$list = xs;\n\t\t\t\t\tisOkay = $temp$isOkay;\n\t\t\t\t\tlist = $temp$list;\n\t\t\t\t\tcontinue any;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar $elm$core$Basics$composeL = F3(\n\tfunction (g, f, x) {\n\t\treturn g(\n\t\t\tf(x));\n\t});\nvar $elm$core$Basics$not = _Basics_not;\nvar $elm$core$List$all = F2(\n\tfunction (isOkay, list) {\n\t\treturn !A2(\n\t\t\t$elm$core$List$any,\n\t\t\tA2($elm$core$Basics$composeL, $elm$core$Basics$not, isOkay),\n\t\t\tlist);\n\t});\nvar $author$project$OptionList$allDatalistOptions = function (options) {\n\treturn A2(\n\t\t$elm$core$List$all,\n\t\tfunction (option) {\n\t\t\tif (option.$ === 'DatalistOption') {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\toptions);\n};\nvar $author$project$OptionList$allFancyOptions = function (options) {\n\treturn A2(\n\t\t$elm$core$List$all,\n\t\tfunction (option) {\n\t\t\tif (option.$ === 'FancyOption') {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\toptions);\n};\nvar $author$project$OptionList$allSlottedOptions = function (options) {\n\treturn A2(\n\t\t$elm$core$List$all,\n\t\tfunction (option) {\n\t\t\tif (option.$ === 'SlottedOption') {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\toptions);\n};\nvar $author$project$OptionList$determineListType = function (options) {\n\treturn $author$project$OptionList$allFancyOptions(options) ? $elm$core$Result$Ok(\n\t\t$author$project$OptionList$FancyOptionList(_List_Nil)) : ($author$project$OptionList$allDatalistOptions(options) ? $elm$core$Result$Ok(\n\t\t$author$project$OptionList$DatalistOptionList(_List_Nil)) : ($author$project$OptionList$allSlottedOptions(options) ? $elm$core$Result$Ok(\n\t\t$author$project$OptionList$SlottedOptionList(_List_Nil)) : $elm$core$Result$Err('The list of options must be all FancyOptions, all DatalistOptions, or all SlottedOptions')));\n};\nvar $elm$json$Json$Decode$list = _Json_decodeList;\nvar $author$project$OptionList$decoderWithAge = F2(\n\tfunction (optionAge, outputStyle) {\n\t\tif (outputStyle.$ === 'CustomHtml') {\n\t\t\treturn A2(\n\t\t\t\t$elm$json$Json$Decode$andThen,\n\t\t\t\tfunction (options) {\n\t\t\t\t\tvar _v1 = $author$project$OptionList$determineListType(options);\n\t\t\t\t\tif (_v1.$ === 'Ok') {\n\t\t\t\t\t\tvar optionList = _v1.a;\n\t\t\t\t\t\tswitch (optionList.$) {\n\t\t\t\t\t\t\tcase 'FancyOptionList':\n\t\t\t\t\t\t\t\treturn $elm$json$Json$Decode$succeed(\n\t\t\t\t\t\t\t\t\t$author$project$OptionList$FancyOptionList(options));\n\t\t\t\t\t\t\tcase 'DatalistOptionList':\n\t\t\t\t\t\t\t\treturn $elm$json$Json$Decode$fail('If the output style is Custom HTML the list of options must FancyOptionList or SlottedOptionList');\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\treturn $elm$json$Json$Decode$succeed(\n\t\t\t\t\t\t\t\t\t$author$project$OptionList$SlottedOptionList(options));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar err = _v1.a;\n\t\t\t\t\t\treturn $elm$json$Json$Decode$fail(err);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t$elm$json$Json$Decode$list(\n\t\t\t\t\tA2($author$project$Option$decoderWithAgeAndOutputStyle, optionAge, outputStyle)));\n\t\t} else {\n\t\t\treturn A2(\n\t\t\t\t$elm$json$Json$Decode$map,\n\t\t\t\t$author$project$OptionList$DatalistOptionList,\n\t\t\t\t$elm$json$Json$Decode$list(\n\t\t\t\t\tA2($elm$json$Json$Decode$map, $author$project$Option$DatalistOption, $author$project$DatalistOption$decoder)));\n\t\t}\n\t});\nvar $author$project$OptionList$decoder = function (outputStyle) {\n\treturn A2($author$project$OptionList$decoderWithAge, $author$project$OptionDisplay$MatureOption, outputStyle);\n};\nvar $elm$json$Json$Encode$bool = _Json_wrap;\nvar $elm$json$Json$Encode$object = function (pairs) {\n\treturn _Json_wrap(\n\t\tA3(\n\t\t\t$elm$core$List$foldl,\n\t\t\tF2(\n\t\t\t\tfunction (_v0, obj) {\n\t\t\t\t\tvar k = _v0.a;\n\t\t\t\t\tvar v = _v0.b;\n\t\t\t\t\treturn A3(_Json_addField, k, v, obj);\n\t\t\t\t}),\n\t\t\t_Json_emptyObject(_Utils_Tuple0),\n\t\t\tpairs));\n};\nvar $elm$json$Json$Encode$string = _Json_wrap;\nvar $author$project$OptionSearchFilter$encodeToken = function (_v0) {\n\tvar isHighlighted = _v0.a;\n\tvar stringChuck = _v0.b;\n\treturn $elm$json$Json$Encode$object(\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'isHighlighted',\n\t\t\t\t$elm$json$Json$Encode$bool(isHighlighted)),\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'stringChunk',\n\t\t\t\t$elm$json$Json$Encode$string(stringChuck))\n\t\t\t]));\n};\nvar $elm$json$Json$Encode$list = F2(\n\tfunction (func, entries) {\n\t\treturn _Json_wrap(\n\t\t\tA3(\n\t\t\t\t$elm$core$List$foldl,\n\t\t\t\t_Json_addEntry(func),\n\t\t\t\t_Json_emptyArray(_Utils_Tuple0),\n\t\t\t\tentries));\n\t});\nvar $author$project$OptionSearchFilter$encodeTokens = function (tokens) {\n\treturn A2($elm$json$Json$Encode$list, $author$project$OptionSearchFilter$encodeToken, tokens);\n};\nvar $elm$json$Json$Encode$int = _Json_wrap;\nvar $author$project$OptionSearchFilter$encode = function (optionSearchFilter) {\n\treturn $elm$json$Json$Encode$object(\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'totalScore',\n\t\t\t\t$elm$json$Json$Encode$int(optionSearchFilter.totalScore)),\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'bestScore',\n\t\t\t\t$elm$json$Json$Encode$int(optionSearchFilter.bestScore)),\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'labelTokens',\n\t\t\t\t$author$project$OptionSearchFilter$encodeTokens(optionSearchFilter.labelTokens)),\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'descriptionTokens',\n\t\t\t\t$author$project$OptionSearchFilter$encodeTokens(optionSearchFilter.descriptionTokens)),\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'groupTokens',\n\t\t\t\t$author$project$OptionSearchFilter$encodeTokens(optionSearchFilter.groupTokens))\n\t\t\t]));\n};\nvar $author$project$FancyOption$getMaybeOptionSearchFilter = function (option) {\n\tswitch (option.$) {\n\t\tcase 'FancyOption':\n\t\t\tvar maybeSearchFilter = option.g;\n\t\t\treturn maybeSearchFilter;\n\t\tcase 'CustomFancyOption':\n\t\t\treturn $elm$core$Maybe$Nothing;\n\t\tdefault:\n\t\t\treturn $elm$core$Maybe$Nothing;\n\t}\n};\nvar $author$project$Option$getMaybeOptionSearchFilter = function (option) {\n\tswitch (option.$) {\n\t\tcase 'FancyOption':\n\t\t\tvar fancyOption = option.a;\n\t\t\treturn $author$project$FancyOption$getMaybeOptionSearchFilter(fancyOption);\n\t\tcase 'DatalistOption':\n\t\t\treturn $elm$core$Maybe$Nothing;\n\t\tdefault:\n\t\t\treturn $elm$core$Maybe$Nothing;\n\t}\n};\nvar $author$project$DatalistOption$getOptionValue = function (datalistOption) {\n\tvar optionValue = datalistOption.b;\n\treturn optionValue;\n};\nvar $author$project$FancyOption$getOptionValue = function (option) {\n\tswitch (option.$) {\n\t\tcase 'FancyOption':\n\t\t\tvar optionValue = option.c;\n\t\t\treturn optionValue;\n\t\tcase 'CustomFancyOption':\n\t\t\tvar optionValue = option.c;\n\t\t\treturn optionValue;\n\t\tdefault:\n\t\t\treturn $author$project$OptionValue$EmptyOptionValue;\n\t}\n};\nvar $author$project$SlottedOption$getOptionValue = function (slottedOption) {\n\tvar optionValue = slottedOption.b;\n\treturn optionValue;\n};\nvar $author$project$Option$getOptionValue = function (option) {\n\tswitch (option.$) {\n\t\tcase 'FancyOption':\n\t\t\tvar fancyOption = option.a;\n\t\t\treturn $author$project$FancyOption$getOptionValue(fancyOption);\n\t\tcase 'DatalistOption':\n\t\t\tvar datalistOption = option.a;\n\t\t\treturn $author$project$DatalistOption$getOptionValue(datalistOption);\n\t\tdefault:\n\t\t\tvar slottedOption = option.a;\n\t\t\treturn $author$project$SlottedOption$getOptionValue(slottedOption);\n\t}\n};\nvar $author$project$Option$getOptionValueAsString = function (option) {\n\tvar _v0 = $author$project$Option$getOptionValue(option);\n\tif (_v0.$ === 'OptionValue') {\n\t\tvar string = _v0.a;\n\t\treturn string;\n\t} else {\n\t\treturn '';\n\t}\n};\nvar $elm$json$Json$Encode$null = _Json_encodeNull;\nvar $author$project$Option$encodeSearchResult = function (option) {\n\treturn $elm$json$Json$Encode$object(\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'value',\n\t\t\t\t$elm$json$Json$Encode$string(\n\t\t\t\t\t$author$project$Option$getOptionValueAsString(option))),\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'searchFilter',\n\t\t\t\tfunction () {\n\t\t\t\t\tvar _v0 = $author$project$Option$getMaybeOptionSearchFilter(option);\n\t\t\t\t\tif (_v0.$ === 'Just') {\n\t\t\t\t\t\tvar optionSearchFilter = _v0.a;\n\t\t\t\t\t\treturn $author$project$OptionSearchFilter$encode(optionSearchFilter);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn $elm$json$Json$Encode$null;\n\t\t\t\t\t}\n\t\t\t\t}())\n\t\t\t]));\n};\nvar $author$project$OptionList$getOptions = function (optionList) {\n\tswitch (optionList.$) {\n\t\tcase 'FancyOptionList':\n\t\t\tvar options = optionList.a;\n\t\t\treturn options;\n\t\tcase 'DatalistOptionList':\n\t\t\tvar options = optionList.a;\n\t\t\treturn options;\n\t\tdefault:\n\t\t\tvar options = optionList.a;\n\t\t\treturn options;\n\t}\n};\nvar $author$project$OptionList$encodeSearchResults = F3(\n\tfunction (optionList, nonce, isClearingList) {\n\t\treturn $elm$json$Json$Encode$object(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t'searchNonce',\n\t\t\t\t\t$elm$json$Json$Encode$int(nonce)),\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t'clearingSearch',\n\t\t\t\t\t$elm$json$Json$Encode$bool(isClearingList)),\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t'options',\n\t\t\t\t\tA2(\n\t\t\t\t\t\t$elm$json$Json$Encode$list,\n\t\t\t\t\t\t$author$project$Option$encodeSearchResult,\n\t\t\t\t\t\t$author$project$OptionList$getOptions(optionList)))\n\t\t\t\t]));\n\t});\nvar $elm$core$List$foldrHelper = F4(\n\tfunction (fn, acc, ctr, ls) {\n\t\tif (!ls.b) {\n\t\t\treturn acc;\n\t\t} else {\n\t\t\tvar a = ls.a;\n\t\t\tvar r1 = ls.b;\n\t\t\tif (!r1.b) {\n\t\t\t\treturn A2(fn, a, acc);\n\t\t\t} else {\n\t\t\t\tvar b = r1.a;\n\t\t\t\tvar r2 = r1.b;\n\t\t\t\tif (!r2.b) {\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tfn,\n\t\t\t\t\t\ta,\n\t\t\t\t\t\tA2(fn, b, acc));\n\t\t\t\t} else {\n\t\t\t\t\tvar c = r2.a;\n\t\t\t\t\tvar r3 = r2.b;\n\t\t\t\t\tif (!r3.b) {\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\tfn,\n\t\t\t\t\t\t\ta,\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\tfn,\n\t\t\t\t\t\t\t\tb,\n\t\t\t\t\t\t\t\tA2(fn, c, acc)));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar d = r3.a;\n\t\t\t\t\t\tvar r4 = r3.b;\n\t\t\t\t\t\tvar res = (ctr > 500) ? A3(\n\t\t\t\t\t\t\t$elm$core$List$foldl,\n\t\t\t\t\t\t\tfn,\n\t\t\t\t\t\t\tacc,\n\t\t\t\t\t\t\t$elm$core$List$reverse(r4)) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\tfn,\n\t\t\t\t\t\t\ta,\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\tfn,\n\t\t\t\t\t\t\t\tb,\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\tfn,\n\t\t\t\t\t\t\t\t\tc,\n\t\t\t\t\t\t\t\t\tA2(fn, d, res))));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar $elm$core$List$foldr = F3(\n\tfunction (fn, acc, ls) {\n\t\treturn A4($elm$core$List$foldrHelper, fn, acc, 0, ls);\n\t});\nvar $elm$core$List$filter = F2(\n\tfunction (isGood, list) {\n\t\treturn A3(\n\t\t\t$elm$core$List$foldr,\n\t\t\tF2(\n\t\t\t\tfunction (x, xs) {\n\t\t\t\t\treturn isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;\n\t\t\t\t}),\n\t\t\t_List_Nil,\n\t\t\tlist);\n\t});\nvar $author$project$OptionList$filter = F2(\n\tfunction (_function, optionList) {\n\t\tswitch (optionList.$) {\n\t\t\tcase 'FancyOptionList':\n\t\t\t\tvar options = optionList.a;\n\t\t\t\treturn $author$project$OptionList$FancyOptionList(\n\t\t\t\t\tA2($elm$core$List$filter, _function, options));\n\t\t\tcase 'DatalistOptionList':\n\t\t\t\tvar options = optionList.a;\n\t\t\t\treturn $author$project$OptionList$DatalistOptionList(\n\t\t\t\t\tA2($elm$core$List$filter, _function, options));\n\t\t\tdefault:\n\t\t\t\tvar options = optionList.a;\n\t\t\t\treturn $author$project$OptionList$SlottedOptionList(\n\t\t\t\t\tA2($elm$core$List$filter, _function, options));\n\t\t}\n\t});\nvar $author$project$OptionSearchFilter$impossiblyLowScore = 1000000;\nvar $author$project$FancyOption$isCustomOption = function (option) {\n\tswitch (option.$) {\n\t\tcase 'FancyOption':\n\t\t\treturn false;\n\t\tcase 'CustomFancyOption':\n\t\t\treturn true;\n\t\tdefault:\n\t\t\treturn false;\n\t}\n};\nvar $author$project$Option$isCustomOption = function (option) {\n\tswitch (option.$) {\n\t\tcase 'FancyOption':\n\t\t\tvar fancyOption = option.a;\n\t\t\treturn $author$project$FancyOption$isCustomOption(fancyOption);\n\t\tcase 'DatalistOption':\n\t\t\treturn false;\n\t\tdefault:\n\t\t\treturn false;\n\t}\n};\nvar $elm$core$List$map = F2(\n\tfunction (f, xs) {\n\t\treturn A3(\n\t\t\t$elm$core$List$foldr,\n\t\t\tF2(\n\t\t\t\tfunction (x, acc) {\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\t$elm$core$List$cons,\n\t\t\t\t\t\tf(x),\n\t\t\t\t\t\tacc);\n\t\t\t\t}),\n\t\t\t_List_Nil,\n\t\t\txs);\n\t});\nvar $elm_community$maybe_extra$Maybe$Extra$cons = F2(\n\tfunction (item, list) {\n\t\tif (item.$ === 'Just') {\n\t\t\tvar v = item.a;\n\t\t\treturn A2($elm$core$List$cons, v, list);\n\t\t} else {\n\t\t\treturn list;\n\t\t}\n\t});\nvar $elm_community$maybe_extra$Maybe$Extra$values = A2($elm$core$List$foldr, $elm_community$maybe_extra$Maybe$Extra$cons, _List_Nil);\nvar $author$project$OptionList$optionSearchResultsBestScore = function (optionList) {\n\treturn A2(\n\t\t$elm$core$List$map,\n\t\tfunction ($) {\n\t\t\treturn $.bestScore;\n\t\t},\n\t\t$elm_community$maybe_extra$Maybe$Extra$values(\n\t\t\tA2(\n\t\t\t\t$elm$core$List$map,\n\t\t\t\t$author$project$Option$getMaybeOptionSearchFilter,\n\t\t\t\t$author$project$OptionList$getOptions(optionList))));\n};\nvar $author$project$OptionList$findLowestSearchScore = function (optionList) {\n\tvar lowSore = A3(\n\t\t$elm$core$List$foldl,\n\t\tF2(\n\t\t\tfunction (optionBestScore, lowScore) {\n\t\t\t\treturn (_Utils_cmp(optionBestScore, lowScore) < 0) ? optionBestScore : lowScore;\n\t\t\t}),\n\t\t$author$project$OptionSearchFilter$impossiblyLowScore,\n\t\t$author$project$OptionList$optionSearchResultsBestScore(\n\t\t\tA2(\n\t\t\t\t$author$project$OptionList$filter,\n\t\t\t\tfunction (option) {\n\t\t\t\t\treturn !$author$project$Option$isCustomOption(option);\n\t\t\t\t},\n\t\t\t\toptionList)));\n\treturn _Utils_eq(lowSore, $author$project$OptionSearchFilter$impossiblyLowScore) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(lowSore);\n};\nvar $author$project$Option$isBelowSearchFilterScore = F2(\n\tfunction (score, option) {\n\t\tvar _v0 = $author$project$Option$getMaybeOptionSearchFilter(option);\n\t\tif (_v0.$ === 'Just') {\n\t\t\tvar optionSearchFilter = _v0.a;\n\t\t\treturn _Utils_cmp(score, optionSearchFilter.bestScore) > -1;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t});\nvar $author$project$OptionSearchFilter$lowScoreCutOff = function (score) {\n\treturn (!score) ? 51 : ((score <= 10) ? 100 : ((score <= 100) ? 1000 : ((score <= 1000) ? 10000 : $author$project$OptionSearchFilter$impossiblyLowScore)));\n};\nvar $author$project$DropdownOptions$filterOptionsToShowInDropdownBySearchScore = function (optionList) {\n\tvar _v0 = $author$project$OptionList$findLowestSearchScore(optionList);\n\tif (_v0.$ === 'Just') {\n\t\tvar lowScore = _v0.a;\n\t\treturn A2(\n\t\t\t$author$project$OptionList$filter,\n\t\t\tfunction (option) {\n\t\t\t\treturn A2(\n\t\t\t\t\t$author$project$Option$isBelowSearchFilterScore,\n\t\t\t\t\t$author$project$OptionSearchFilter$lowScoreCutOff(lowScore),\n\t\t\t\t\toption) || $author$project$Option$isCustomOption(option);\n\t\t\t},\n\t\t\toptionList);\n\t} else {\n\t\treturn optionList;\n\t}\n};\nvar $author$project$FilterWorker$sendErrorMessage = _Platform_outgoingPort('sendErrorMessage', $elm$json$Json$Encode$string);\nvar $author$project$FilterWorker$sendSearchResults = _Platform_outgoingPort('sendSearchResults', $elm$core$Basics$identity);\nvar $elm$core$List$takeReverse = F3(\n\tfunction (n, list, kept) {\n\t\ttakeReverse:\n\t\twhile (true) {\n\t\t\tif (n <= 0) {\n\t\t\t\treturn kept;\n\t\t\t} else {\n\t\t\t\tif (!list.b) {\n\t\t\t\t\treturn kept;\n\t\t\t\t} else {\n\t\t\t\t\tvar x = list.a;\n\t\t\t\t\tvar xs = list.b;\n\t\t\t\t\tvar $temp$n = n - 1,\n\t\t\t\t\t\t$temp$list = xs,\n\t\t\t\t\t\t$temp$kept = A2($elm$core$List$cons, x, kept);\n\t\t\t\t\tn = $temp$n;\n\t\t\t\t\tlist = $temp$list;\n\t\t\t\t\tkept = $temp$kept;\n\t\t\t\t\tcontinue takeReverse;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar $elm$core$List$takeTailRec = F2(\n\tfunction (n, list) {\n\t\treturn $elm$core$List$reverse(\n\t\t\tA3($elm$core$List$takeReverse, n, list, _List_Nil));\n\t});\nvar $elm$core$List$takeFast = F3(\n\tfunction (ctr, n, list) {\n\t\tif (n <= 0) {\n\t\t\treturn _List_Nil;\n\t\t} else {\n\t\t\tvar _v0 = _Utils_Tuple2(n, list);\n\t\t\t_v0$1:\n\t\t\twhile (true) {\n\t\t\t\t_v0$5:\n\t\t\t\twhile (true) {\n\t\t\t\t\tif (!_v0.b.b) {\n\t\t\t\t\t\treturn list;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (_v0.b.b.b) {\n\t\t\t\t\t\t\tswitch (_v0.a) {\n\t\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\t\tbreak _v0$1;\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\tvar _v2 = _v0.b;\n\t\t\t\t\t\t\t\t\tvar x = _v2.a;\n\t\t\t\t\t\t\t\t\tvar _v3 = _v2.b;\n\t\t\t\t\t\t\t\t\tvar y = _v3.a;\n\t\t\t\t\t\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[x, y]);\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\tif (_v0.b.b.b.b) {\n\t\t\t\t\t\t\t\t\t\tvar _v4 = _v0.b;\n\t\t\t\t\t\t\t\t\t\tvar x = _v4.a;\n\t\t\t\t\t\t\t\t\t\tvar _v5 = _v4.b;\n\t\t\t\t\t\t\t\t\t\tvar y = _v5.a;\n\t\t\t\t\t\t\t\t\t\tvar _v6 = _v5.b;\n\t\t\t\t\t\t\t\t\t\tvar z = _v6.a;\n\t\t\t\t\t\t\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[x, y, z]);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tbreak _v0$5;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tif (_v0.b.b.b.b && _v0.b.b.b.b.b) {\n\t\t\t\t\t\t\t\t\t\tvar _v7 = _v0.b;\n\t\t\t\t\t\t\t\t\t\tvar x = _v7.a;\n\t\t\t\t\t\t\t\t\t\tvar _v8 = _v7.b;\n\t\t\t\t\t\t\t\t\t\tvar y = _v8.a;\n\t\t\t\t\t\t\t\t\t\tvar _v9 = _v8.b;\n\t\t\t\t\t\t\t\t\t\tvar z = _v9.a;\n\t\t\t\t\t\t\t\t\t\tvar _v10 = _v9.b;\n\t\t\t\t\t\t\t\t\t\tvar w = _v10.a;\n\t\t\t\t\t\t\t\t\t\tvar tl = _v10.b;\n\t\t\t\t\t\t\t\t\t\treturn (ctr > 1000) ? A2(\n\t\t\t\t\t\t\t\t\t\t\t$elm$core$List$cons,\n\t\t\t\t\t\t\t\t\t\t\tx,\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t$elm$core$List$cons,\n\t\t\t\t\t\t\t\t\t\t\t\ty,\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t$elm$core$List$cons,\n\t\t\t\t\t\t\t\t\t\t\t\t\tz,\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$elm$core$List$cons,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tw,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2($elm$core$List$takeTailRec, n - 4, tl))))) : A2(\n\t\t\t\t\t\t\t\t\t\t\t$elm$core$List$cons,\n\t\t\t\t\t\t\t\t\t\t\tx,\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t$elm$core$List$cons,\n\t\t\t\t\t\t\t\t\t\t\t\ty,\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t$elm$core$List$cons,\n\t\t\t\t\t\t\t\t\t\t\t\t\tz,\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$elm$core$List$cons,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tw,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA3($elm$core$List$takeFast, ctr + 1, n - 4, tl)))));\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tbreak _v0$5;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (_v0.a === 1) {\n\t\t\t\t\t\t\t\tbreak _v0$1;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tbreak _v0$5;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn list;\n\t\t\t}\n\t\t\tvar _v1 = _v0.b;\n\t\t\tvar x = _v1.a;\n\t\t\treturn _List_fromArray(\n\t\t\t\t[x]);\n\t\t}\n\t});\nvar $elm$core$List$take = F2(\n\tfunction (n, list) {\n\t\treturn A3($elm$core$List$takeFast, 0, n, list);\n\t});\nvar $author$project$OptionList$take = F2(\n\tfunction (_int, optionList) {\n\t\tswitch (optionList.$) {\n\t\t\tcase 'FancyOptionList':\n\t\t\t\tvar options = optionList.a;\n\t\t\t\treturn $author$project$OptionList$FancyOptionList(\n\t\t\t\t\tA2($elm$core$List$take, _int, options));\n\t\t\tcase 'DatalistOptionList':\n\t\t\t\tvar options = optionList.a;\n\t\t\t\treturn $author$project$OptionList$DatalistOptionList(\n\t\t\t\t\tA2($elm$core$List$take, _int, options));\n\t\t\tdefault:\n\t\t\t\tvar options = optionList.a;\n\t\t\t\treturn $author$project$OptionList$SlottedOptionList(\n\t\t\t\t\tA2($elm$core$List$take, _int, options));\n\t\t}\n\t});\nvar $elm$core$String$length = _String_length;\nvar $author$project$SearchString$length = function (_v0) {\n\tvar str = _v0.a;\n\treturn $elm$core$String$length(str);\n};\nvar $author$project$PositiveInt$lessThanOrEqualTo = F2(\n\tfunction (_v0, b) {\n\t\tvar a = _v0.a;\n\t\treturn _Utils_cmp(a, b) < 1;\n\t});\nvar $author$project$OptionList$map = F2(\n\tfunction (_function, optionList) {\n\t\tswitch (optionList.$) {\n\t\t\tcase 'FancyOptionList':\n\t\t\t\tvar options = optionList.a;\n\t\t\t\treturn $author$project$OptionList$FancyOptionList(\n\t\t\t\t\tA2($elm$core$List$map, _function, options));\n\t\t\tcase 'DatalistOptionList':\n\t\t\t\tvar options = optionList.a;\n\t\t\t\treturn $author$project$OptionList$DatalistOptionList(\n\t\t\t\t\tA2($elm$core$List$map, _function, options));\n\t\t\tdefault:\n\t\t\t\tvar options = optionList.a;\n\t\t\t\treturn $author$project$OptionList$SlottedOptionList(\n\t\t\t\t\tA2($elm$core$List$map, _function, options));\n\t\t}\n\t});\nvar $author$project$FancyOption$CustomFancyOption = F4(\n\tfunction (a, b, c, d) {\n\t\treturn {$: 'CustomFancyOption', a: a, b: b, c: c, d: d};\n\t});\nvar $author$project$FancyOption$setOptionSearchFilter = F2(\n\tfunction (searchFilter, option) {\n\t\tswitch (option.$) {\n\t\t\tcase 'FancyOption':\n\t\t\t\tvar display = option.a;\n\t\t\t\tvar label = option.b;\n\t\t\t\tvar value = option.c;\n\t\t\t\tvar description = option.d;\n\t\t\t\tvar group = option.e;\n\t\t\t\tvar part = option.f;\n\t\t\t\treturn A7($author$project$FancyOption$FancyOption, display, label, value, description, group, part, searchFilter);\n\t\t\tcase 'CustomFancyOption':\n\t\t\t\tvar display = option.a;\n\t\t\t\tvar label = option.b;\n\t\t\t\tvar value = option.c;\n\t\t\t\treturn A4($author$project$FancyOption$CustomFancyOption, display, label, value, searchFilter);\n\t\t\tdefault:\n\t\t\t\treturn option;\n\t\t}\n\t});\nvar $author$project$Option$setOptionSearchFilter = F2(\n\tfunction (maybeOptionSearchFilter, option) {\n\t\tswitch (option.$) {\n\t\t\tcase 'FancyOption':\n\t\t\t\tvar fancyOption = option.a;\n\t\t\t\treturn $author$project$Option$FancyOption(\n\t\t\t\t\tA2($author$project$FancyOption$setOptionSearchFilter, maybeOptionSearchFilter, fancyOption));\n\t\t\tcase 'DatalistOption':\n\t\t\t\treturn option;\n\t\t\tdefault:\n\t\t\t\treturn option;\n\t\t}\n\t});\nvar $elm$core$String$contains = _String_contains;\nvar $author$project$OptionSearchFilter$descriptionHandicap = function (score) {\n\treturn (score < 5) ? 5 : $elm$core$Basics$floor(score * 1.25);\n};\nvar $author$project$OptionDescription$noDescription = $author$project$OptionDescription$NoDescription;\nvar $author$project$FancyOption$getOptionDescription = function (option) {\n\tswitch (option.$) {\n\t\tcase 'FancyOption':\n\t\t\tvar description = option.d;\n\t\t\treturn description;\n\t\tcase 'CustomFancyOption':\n\t\t\treturn $author$project$OptionDescription$noDescription;\n\t\tdefault:\n\t\t\treturn $author$project$OptionDescription$noDescription;\n\t}\n};\nvar $author$project$Option$getDescription = function (option) {\n\tswitch (option.$) {\n\t\tcase 'FancyOption':\n\t\t\tvar fancyOption = option.a;\n\t\t\treturn $author$project$FancyOption$getOptionDescription(fancyOption);\n\t\tcase 'DatalistOption':\n\t\t\treturn $author$project$OptionDescription$noDescription;\n\t\tdefault:\n\t\t\treturn $author$project$OptionDescription$noDescription;\n\t}\n};\nvar $author$project$FancyOption$getOptionGroup = function (fancyOption) {\n\tswitch (fancyOption.$) {\n\t\tcase 'FancyOption':\n\t\t\tvar group = fancyOption.e;\n\t\t\treturn group;\n\t\tcase 'CustomFancyOption':\n\t\t\treturn $author$project$OptionGroup$NoOptionGroup;\n\t\tdefault:\n\t\t\treturn $author$project$OptionGroup$NoOptionGroup;\n\t}\n};\nvar $author$project$OptionGroup$new = function (string) {\n\treturn (string === '') ? $author$project$OptionGroup$NoOptionGroup : $author$project$OptionGroup$OptionGroup(string);\n};\nvar $author$project$Option$getOptionGroup = function (option) {\n\tswitch (option.$) {\n\t\tcase 'FancyOption':\n\t\t\tvar fancyOption = option.a;\n\t\t\treturn $author$project$FancyOption$getOptionGroup(fancyOption);\n\t\tcase 'DatalistOption':\n\t\t\treturn $author$project$OptionGroup$new('');\n\t\tdefault:\n\t\t\treturn $author$project$OptionGroup$new('');\n\t}\n};\nvar $author$project$OptionLabel$new = function (string) {\n\treturn A3($author$project$OptionLabel$OptionLabel, string, $elm$core$Maybe$Nothing, $author$project$SortRank$NoSortRank);\n};\nvar $author$project$OptionValue$optionValueToString = function (optionValue) {\n\tif (optionValue.$ === 'OptionValue') {\n\t\tvar valueString = optionValue.a;\n\t\treturn valueString;\n\t} else {\n\t\treturn '';\n\t}\n};\nvar $author$project$DatalistOption$getOptionLabel = function (datalistOption) {\n\tvar optionValue = datalistOption.b;\n\treturn $author$project$OptionLabel$new(\n\t\t$author$project$OptionValue$optionValueToString(optionValue));\n};\nvar $author$project$FancyOption$getOptionLabel = function (fancyOption) {\n\tswitch (fancyOption.$) {\n\t\tcase 'FancyOption':\n\t\t\tvar optionLabel = fancyOption.b;\n\t\t\treturn optionLabel;\n\t\tcase 'CustomFancyOption':\n\t\t\tvar optionLabel = fancyOption.b;\n\t\t\treturn optionLabel;\n\t\tdefault:\n\t\t\tvar optionLabel = fancyOption.b;\n\t\t\treturn optionLabel;\n\t}\n};\nvar $author$project$Option$getOptionLabel = function (option) {\n\tswitch (option.$) {\n\t\tcase 'FancyOption':\n\t\t\tvar fancyOption = option.a;\n\t\t\treturn $author$project$FancyOption$getOptionLabel(fancyOption);\n\t\tcase 'DatalistOption':\n\t\t\tvar datalistOption = option.a;\n\t\t\treturn $author$project$DatalistOption$getOptionLabel(datalistOption);\n\t\tdefault:\n\t\t\treturn $author$project$OptionLabel$new('');\n\t}\n};\nvar $author$project$OptionSearchFilter$groupHandicap = function (score) {\n\treturn (score < 10) ? 10 : $elm$core$Basics$floor(score * 1.5);\n};\nvar $elm$core$Basics$min = F2(\n\tfunction (x, y) {\n\t\treturn (_Utils_cmp(x, y) < 0) ? x : y;\n\t});\nvar $elm$core$List$minimum = function (list) {\n\tif (list.b) {\n\t\tvar x = list.a;\n\t\tvar xs = list.b;\n\t\treturn $elm$core$Maybe$Just(\n\t\t\tA3($elm$core$List$foldl, $elm$core$Basics$min, x, xs));\n\t} else {\n\t\treturn $elm$core$Maybe$Nothing;\n\t}\n};\nvar $author$project$OptionSearchFilter$new = F5(\n\tfunction (totalScore, bestScore, labelTokens, descriptionTokens, groupTokens) {\n\t\treturn {bestScore: bestScore, descriptionTokens: descriptionTokens, groupTokens: groupTokens, labelTokens: labelTokens, totalScore: totalScore};\n\t});\nvar $author$project$OptionLabel$optionLabelToSearchString = function (optionLabel) {\n\tvar string = optionLabel.a;\n\tvar maybeCleanString = optionLabel.b;\n\tif (maybeCleanString.$ === 'Just') {\n\t\tvar cleanString = maybeCleanString.a;\n\t\treturn cleanString;\n\t} else {\n\t\treturn $elm$core$String$toLower(string);\n\t}\n};\nvar $author$project$OptionLabel$optionLabelToString = function (optionLabel) {\n\tvar label = optionLabel.a;\n\treturn label;\n};\nvar $tripokey$elm_fuzzy$Fuzzy$Match = F4(\n\tfunction (score, offset, length, keys) {\n\t\treturn {keys: keys, length: length, offset: offset, score: score};\n\t});\nvar $tripokey$elm_fuzzy$Fuzzy$Result = F2(\n\tfunction (score, matches) {\n\t\treturn {matches: matches, score: score};\n\t});\nvar $tripokey$elm_fuzzy$Fuzzy$ConfigModel = F4(\n\tfunction (addPenalty, movePenalty, removePenalty, insertPenalty) {\n\t\treturn {addPenalty: addPenalty, insertPenalty: insertPenalty, movePenalty: movePenalty, removePenalty: removePenalty};\n\t});\nvar $tripokey$elm_fuzzy$Fuzzy$defaultConfig = A4($tripokey$elm_fuzzy$Fuzzy$ConfigModel, 10, 1000, 10000, 1);\nvar $elm$core$String$indexes = _String_indexes;\nvar $elm$core$Tuple$second = function (_v0) {\n\tvar y = _v0.b;\n\treturn y;\n};\nvar $elm$core$String$slice = _String_slice;\nvar $tripokey$elm_fuzzy$Fuzzy$dissect = F2(\n\tfunction (separators, strings) {\n\t\tdissect:\n\t\twhile (true) {\n\t\t\tif (!separators.b) {\n\t\t\t\treturn strings;\n\t\t\t} else {\n\t\t\t\tvar head = separators.a;\n\t\t\t\tvar tail = separators.b;\n\t\t\t\tvar dissectEntry = function (entry) {\n\t\t\t\t\tvar separatorLength = $elm$core$String$length(head);\n\t\t\t\t\tvar slice = F2(\n\t\t\t\t\t\tfunction (index, _v1) {\n\t\t\t\t\t\t\tvar prevIndex = _v1.a;\n\t\t\t\t\t\t\tvar sum = _v1.b;\n\t\t\t\t\t\t\tvar separatorSlice = _List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA3($elm$core$String$slice, index, index + separatorLength, entry)\n\t\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\tvar precedingSlice = _Utils_eq(prevIndex, index) ? _List_Nil : _List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA3($elm$core$String$slice, prevIndex, index, entry)\n\t\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\t\tindex + separatorLength,\n\t\t\t\t\t\t\t\t_Utils_ap(\n\t\t\t\t\t\t\t\t\tsum,\n\t\t\t\t\t\t\t\t\t_Utils_ap(precedingSlice, separatorSlice)));\n\t\t\t\t\t\t});\n\t\t\t\t\tvar indexes = A2($elm$core$String$indexes, head, entry);\n\t\t\t\t\tvar result = A3(\n\t\t\t\t\t\t$elm$core$List$foldl,\n\t\t\t\t\t\tslice,\n\t\t\t\t\t\t_Utils_Tuple2(0, _List_Nil),\n\t\t\t\t\t\tindexes);\n\t\t\t\t\tvar lastIndex = result.a;\n\t\t\t\t\tvar first = result.b;\n\t\t\t\t\tvar entryLength = $elm$core$String$length(entry);\n\t\t\t\t\tvar last = _Utils_eq(lastIndex, entryLength) ? _List_Nil : _List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA3($elm$core$String$slice, lastIndex, entryLength, entry)\n\t\t\t\t\t\t]);\n\t\t\t\t\treturn _Utils_ap(first, last);\n\t\t\t\t};\n\t\t\t\tvar dissected = A3(\n\t\t\t\t\t$elm$core$List$foldl,\n\t\t\t\t\tF2(\n\t\t\t\t\t\tfunction (e, s) {\n\t\t\t\t\t\t\treturn _Utils_ap(\n\t\t\t\t\t\t\t\ts,\n\t\t\t\t\t\t\t\tdissectEntry(e));\n\t\t\t\t\t\t}),\n\t\t\t\t\t_List_Nil,\n\t\t\t\t\tstrings);\n\t\t\t\tvar $temp$separators = tail,\n\t\t\t\t\t$temp$strings = dissected;\n\t\t\t\tseparators = $temp$separators;\n\t\t\t\tstrings = $temp$strings;\n\t\t\t\tcontinue dissect;\n\t\t\t}\n\t\t}\n\t});\nvar $elm$core$String$foldl = _String_foldl;\nvar $elm$core$String$cons = _String_cons;\nvar $elm$core$String$fromChar = function (_char) {\n\treturn A2($elm$core$String$cons, _char, '');\n};\nvar $elm$core$List$head = function (list) {\n\tif (list.b) {\n\t\tvar x = list.a;\n\t\tvar xs = list.b;\n\t\treturn $elm$core$Maybe$Just(x);\n\t} else {\n\t\treturn $elm$core$Maybe$Nothing;\n\t}\n};\nvar $tripokey$elm_fuzzy$Fuzzy$initialModel = _List_Nil;\nvar $elm$core$List$member = F2(\n\tfunction (x, xs) {\n\t\treturn A2(\n\t\t\t$elm$core$List$any,\n\t\t\tfunction (a) {\n\t\t\t\treturn _Utils_eq(a, x);\n\t\t\t},\n\t\t\txs);\n\t});\nvar $elm$core$List$isEmpty = function (xs) {\n\tif (!xs.b) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n};\nvar $elm$core$List$partition = F2(\n\tfunction (pred, list) {\n\t\tvar step = F2(\n\t\t\tfunction (x, _v0) {\n\t\t\t\tvar trues = _v0.a;\n\t\t\t\tvar falses = _v0.b;\n\t\t\t\treturn pred(x) ? _Utils_Tuple2(\n\t\t\t\t\tA2($elm$core$List$cons, x, trues),\n\t\t\t\t\tfalses) : _Utils_Tuple2(\n\t\t\t\t\ttrues,\n\t\t\t\t\tA2($elm$core$List$cons, x, falses));\n\t\t\t});\n\t\treturn A3(\n\t\t\t$elm$core$List$foldr,\n\t\t\tstep,\n\t\t\t_Utils_Tuple2(_List_Nil, _List_Nil),\n\t\t\tlist);\n\t});\nvar $tripokey$elm_fuzzy$Fuzzy$quickSort = function (entries) {\n\tif (!entries.b) {\n\t\treturn _Utils_Tuple2(0, _List_Nil);\n\t} else {\n\t\tvar head = entries.a;\n\t\tvar tail = entries.b;\n\t\tvar partition = A2(\n\t\t\t$elm$core$List$partition,\n\t\t\tfunction (e) {\n\t\t\t\treturn _Utils_cmp(e, head) < 0;\n\t\t\t},\n\t\t\ttail);\n\t\tvar smaller = $tripokey$elm_fuzzy$Fuzzy$quickSort(partition.a);\n\t\tvar penalty = $elm$core$List$isEmpty(smaller.b) ? 0 : 1;\n\t\tvar larger = $tripokey$elm_fuzzy$Fuzzy$quickSort(partition.b);\n\t\treturn _Utils_Tuple2(\n\t\t\t(smaller.a + penalty) + larger.a,\n\t\t\t_Utils_ap(\n\t\t\t\tsmaller.b,\n\t\t\t\t_Utils_ap(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[head]),\n\t\t\t\t\tlarger.b)));\n\t}\n};\nvar $tripokey$elm_fuzzy$Fuzzy$distance = F3(\n\tfunction (config, needle, hay) {\n\t\tvar accumulateInsertPenalty = F2(\n\t\t\tfunction (elem, result) {\n\t\t\t\tif (result.a.$ === 'Just') {\n\t\t\t\t\tvar prev = result.a.a;\n\t\t\t\t\tvar score = result.b;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t$elm$core$Maybe$Just(elem),\n\t\t\t\t\t\t((elem - 1) - prev) + score);\n\t\t\t\t} else {\n\t\t\t\t\tvar _v2 = result.a;\n\t\t\t\t\tvar score = result.b;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t$elm$core$Maybe$Just(elem),\n\t\t\t\t\t\tscore);\n\t\t\t\t}\n\t\t\t});\n\t\tvar accumulate = F2(\n\t\t\tfunction (c, indexList) {\n\t\t\t\tvar indexes = A2(\n\t\t\t\t\t$elm$core$String$indexes,\n\t\t\t\t\t$elm$core$String$fromChar(c),\n\t\t\t\t\thay);\n\t\t\t\tvar hayIndex = $elm$core$List$head(\n\t\t\t\t\tA2(\n\t\t\t\t\t\t$elm$core$List$filter,\n\t\t\t\t\t\tfunction (e) {\n\t\t\t\t\t\t\treturn !A2($elm$core$List$member, e, indexList);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tindexes));\n\t\t\t\tif (hayIndex.$ === 'Just') {\n\t\t\t\t\tvar v = hayIndex.a;\n\t\t\t\t\treturn _Utils_ap(\n\t\t\t\t\t\tindexList,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[v]));\n\t\t\t\t} else {\n\t\t\t\t\treturn indexList;\n\t\t\t\t}\n\t\t\t});\n\t\tvar accumulated = A3($elm$core$String$foldl, accumulate, $tripokey$elm_fuzzy$Fuzzy$initialModel, needle);\n\t\tvar hPenalty = ($elm$core$String$length(hay) - $elm$core$List$length(accumulated)) * config.addPenalty;\n\t\tvar nPenalty = ($elm$core$String$length(needle) - $elm$core$List$length(accumulated)) * config.removePenalty;\n\t\tvar sorted = $tripokey$elm_fuzzy$Fuzzy$quickSort(accumulated);\n\t\tvar iPenalty = A3(\n\t\t\t$elm$core$List$foldl,\n\t\t\taccumulateInsertPenalty,\n\t\t\t_Utils_Tuple2($elm$core$Maybe$Nothing, 0),\n\t\t\tsorted.b).b * config.insertPenalty;\n\t\tvar mPenalty = sorted.a * config.movePenalty;\n\t\treturn A4(\n\t\t\t$tripokey$elm_fuzzy$Fuzzy$Match,\n\t\t\t((mPenalty + hPenalty) + nPenalty) + iPenalty,\n\t\t\t0,\n\t\t\t$elm$core$String$length(hay),\n\t\t\tsorted.b);\n\t});\nvar $elm$core$List$repeatHelp = F3(\n\tfunction (result, n, value) {\n\t\trepeatHelp:\n\t\twhile (true) {\n\t\t\tif (n <= 0) {\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\tvar $temp$result = A2($elm$core$List$cons, value, result),\n\t\t\t\t\t$temp$n = n - 1,\n\t\t\t\t\t$temp$value = value;\n\t\t\t\tresult = $temp$result;\n\t\t\t\tn = $temp$n;\n\t\t\t\tvalue = $temp$value;\n\t\t\t\tcontinue repeatHelp;\n\t\t\t}\n\t\t}\n\t});\nvar $elm$core$List$repeat = F2(\n\tfunction (n, value) {\n\t\treturn A3($elm$core$List$repeatHelp, _List_Nil, n, value);\n\t});\nvar $tripokey$elm_fuzzy$Fuzzy$padHays = F2(\n\tfunction (ns, hs) {\n\t\treturn _Utils_ap(\n\t\t\ths,\n\t\t\tA2(\n\t\t\t\t$elm$core$List$repeat,\n\t\t\t\tns - $elm$core$List$length(hs),\n\t\t\t\t''));\n\t});\nvar $elm$core$List$drop = F2(\n\tfunction (n, list) {\n\t\tdrop:\n\t\twhile (true) {\n\t\t\tif (n <= 0) {\n\t\t\t\treturn list;\n\t\t\t} else {\n\t\t\t\tif (!list.b) {\n\t\t\t\t\treturn list;\n\t\t\t\t} else {\n\t\t\t\t\tvar x = list.a;\n\t\t\t\t\tvar xs = list.b;\n\t\t\t\t\tvar $temp$n = n - 1,\n\t\t\t\t\t\t$temp$list = xs;\n\t\t\t\t\tn = $temp$n;\n\t\t\t\t\tlist = $temp$list;\n\t\t\t\t\tcontinue drop;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar $tripokey$elm_fuzzy$Fuzzy$reduceLeft = F3(\n\tfunction (ns, c, hs) {\n\t\treturn _Utils_Tuple2(\n\t\t\tA3(\n\t\t\t\t$elm$core$List$foldl,\n\t\t\t\tF2(\n\t\t\t\t\tfunction (e, sum) {\n\t\t\t\t\t\treturn $elm$core$String$length(e) + sum;\n\t\t\t\t\t}),\n\t\t\t\t0,\n\t\t\t\tA2($elm$core$List$take, c, hs)),\n\t\t\tA2($elm$core$List$drop, c, hs));\n\t});\nvar $tripokey$elm_fuzzy$Fuzzy$reduceRight = F3(\n\tfunction (ns, c, hs) {\n\t\treturn A2(\n\t\t\t$elm$core$List$take,\n\t\t\t$elm$core$List$length(hs) - ((ns - c) - 1),\n\t\t\ths);\n\t});\nvar $tripokey$elm_fuzzy$Fuzzy$match = F4(\n\tfunction (configs, separators, needle, hay) {\n\t\tvar reduceHays = F3(\n\t\t\tfunction (ns, c, hs) {\n\t\t\t\treturn A3(\n\t\t\t\t\t$tripokey$elm_fuzzy$Fuzzy$reduceLeft,\n\t\t\t\t\tns,\n\t\t\t\t\tc,\n\t\t\t\t\tA3(\n\t\t\t\t\t\t$tripokey$elm_fuzzy$Fuzzy$reduceRight,\n\t\t\t\t\t\tns,\n\t\t\t\t\t\tc,\n\t\t\t\t\t\tA2($tripokey$elm_fuzzy$Fuzzy$padHays, ns, hs)));\n\t\t\t});\n\t\tvar needles = A2(\n\t\t\t$tripokey$elm_fuzzy$Fuzzy$dissect,\n\t\t\tseparators,\n\t\t\t_List_fromArray(\n\t\t\t\t[needle]));\n\t\tvar initialResult = A2($tripokey$elm_fuzzy$Fuzzy$Result, 0, _List_Nil);\n\t\tvar hays = A2(\n\t\t\t$tripokey$elm_fuzzy$Fuzzy$dissect,\n\t\t\tseparators,\n\t\t\t_List_fromArray(\n\t\t\t\t[hay]));\n\t\tvar accumulateConfig = F2(\n\t\t\tfunction (c, sum) {\n\t\t\t\tswitch (c.$) {\n\t\t\t\t\tcase 'AddPenalty':\n\t\t\t\t\t\tvar val = c.a;\n\t\t\t\t\t\treturn _Utils_update(\n\t\t\t\t\t\t\tsum,\n\t\t\t\t\t\t\t{addPenalty: val});\n\t\t\t\t\tcase 'RemovePenalty':\n\t\t\t\t\t\tvar val = c.a;\n\t\t\t\t\t\treturn _Utils_update(\n\t\t\t\t\t\t\tsum,\n\t\t\t\t\t\t\t{removePenalty: val});\n\t\t\t\t\tcase 'MovePenalty':\n\t\t\t\t\t\tvar val = c.a;\n\t\t\t\t\t\treturn _Utils_update(\n\t\t\t\t\t\t\tsum,\n\t\t\t\t\t\t\t{movePenalty: val});\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tvar val = c.a;\n\t\t\t\t\t\treturn _Utils_update(\n\t\t\t\t\t\t\tsum,\n\t\t\t\t\t\t\t{insertPenalty: val});\n\t\t\t\t}\n\t\t\t});\n\t\tvar config = A3($elm$core$List$foldl, accumulateConfig, $tripokey$elm_fuzzy$Fuzzy$defaultConfig, configs);\n\t\tvar minScore = F2(\n\t\t\tfunction (n, _v2) {\n\t\t\t\tvar offset = _v2.a;\n\t\t\t\tvar hs = _v2.b;\n\t\t\t\tvar initialPenalty = ((($elm$core$String$length(n) * config.removePenalty) + ($elm$core$String$length(n) * config.movePenalty)) + ($elm$core$String$length(hay) * config.addPenalty)) + (($elm$core$String$length(hay) * $elm$core$String$length(n)) * config.insertPenalty);\n\t\t\t\tvar initialMatch = A4($tripokey$elm_fuzzy$Fuzzy$Match, initialPenalty, offset, 0, _List_Nil);\n\t\t\t\tvar accumulateMatch = F2(\n\t\t\t\t\tfunction (e, _v1) {\n\t\t\t\t\t\tvar prev = _v1.a;\n\t\t\t\t\t\tvar prevOffset = _v1.b;\n\t\t\t\t\t\tvar newOffset = prevOffset + $elm$core$String$length(e);\n\t\t\t\t\t\tvar eDistance = A3($tripokey$elm_fuzzy$Fuzzy$distance, config, n, e);\n\t\t\t\t\t\tvar newMatch = (_Utils_cmp(eDistance.score, prev.score) < 0) ? _Utils_update(\n\t\t\t\t\t\t\teDistance,\n\t\t\t\t\t\t\t{offset: prevOffset}) : prev;\n\t\t\t\t\t\treturn _Utils_Tuple2(newMatch, newOffset);\n\t\t\t\t\t});\n\t\t\t\treturn A3(\n\t\t\t\t\t$elm$core$List$foldl,\n\t\t\t\t\taccumulateMatch,\n\t\t\t\t\t_Utils_Tuple2(initialMatch, offset),\n\t\t\t\t\ths).a;\n\t\t\t});\n\t\tvar accumulateResult = F2(\n\t\t\tfunction (n, _v0) {\n\t\t\t\tvar prev = _v0.a;\n\t\t\t\tvar num = _v0.b;\n\t\t\t\tvar matchResult = A2(\n\t\t\t\t\tminScore,\n\t\t\t\t\tn,\n\t\t\t\t\tA3(\n\t\t\t\t\t\treduceHays,\n\t\t\t\t\t\t$elm$core$List$length(needles),\n\t\t\t\t\t\tnum,\n\t\t\t\t\t\thays));\n\t\t\t\tvar newResult = _Utils_update(\n\t\t\t\t\tprev,\n\t\t\t\t\t{\n\t\t\t\t\t\tmatches: _Utils_ap(\n\t\t\t\t\t\t\tprev.matches,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[matchResult])),\n\t\t\t\t\t\tscore: matchResult.score + prev.score\n\t\t\t\t\t});\n\t\t\t\treturn _Utils_Tuple2(newResult, num + 1);\n\t\t\t});\n\t\treturn A3(\n\t\t\t$elm$core$List$foldl,\n\t\t\taccumulateResult,\n\t\t\t_Utils_Tuple2(initialResult, 0),\n\t\t\tneedles).a;\n\t});\nvar $author$project$OptionSearcher$groupMatch = F2(\n\tfunction (needle, hay) {\n\t\treturn A4(\n\t\t\t$tripokey$elm_fuzzy$Fuzzy$match,\n\t\t\t_List_Nil,\n\t\t\t_List_fromArray(\n\t\t\t\t[' ']),\n\t\t\tneedle,\n\t\t\thay);\n\t});\nvar $author$project$OptionSearcher$simpleMatch = F2(\n\tfunction (needle, hay) {\n\t\treturn A4(\n\t\t\t$tripokey$elm_fuzzy$Fuzzy$match,\n\t\t\t_List_Nil,\n\t\t\t_List_fromArray(\n\t\t\t\t[' ']),\n\t\t\tneedle,\n\t\t\thay);\n\t});\nvar $author$project$OptionDescription$toSearchString = function (optionDescription) {\n\tif (optionDescription.$ === 'OptionDescription') {\n\t\tvar description = optionDescription.a;\n\t\tvar maybeCleanDescription = optionDescription.b;\n\t\tif (maybeCleanDescription.$ === 'Just') {\n\t\t\tvar cleanDescription = maybeCleanDescription.a;\n\t\t\treturn cleanDescription;\n\t\t} else {\n\t\t\treturn $elm$core$String$toLower(description);\n\t\t}\n\t} else {\n\t\treturn '';\n\t}\n};\nvar $author$project$OptionGroup$toSearchString = function (optionGroup) {\n\tif (optionGroup.$ === 'OptionGroup') {\n\t\tvar string = optionGroup.a;\n\t\treturn $elm$core$String$toLower(string);\n\t} else {\n\t\treturn '';\n\t}\n};\nvar $author$project$OptionSearcher$search = F2(\n\tfunction (string, option) {\n\t\treturn {\n\t\t\tdescriptionMatch: A2(\n\t\t\t\t$author$project$OptionSearcher$simpleMatch,\n\t\t\t\t$elm$core$String$toLower(string),\n\t\t\t\t$author$project$OptionDescription$toSearchString(\n\t\t\t\t\t$author$project$Option$getDescription(option))),\n\t\t\tgroupMatch: A2(\n\t\t\t\t$author$project$OptionSearcher$groupMatch,\n\t\t\t\t$elm$core$String$toLower(string),\n\t\t\t\t$author$project$OptionGroup$toSearchString(\n\t\t\t\t\t$author$project$Option$getOptionGroup(option))),\n\t\t\tlabelMatch: A2(\n\t\t\t\t$author$project$OptionSearcher$simpleMatch,\n\t\t\t\t$elm$core$String$toLower(string),\n\t\t\t\t$author$project$OptionLabel$optionLabelToSearchString(\n\t\t\t\t\t$author$project$Option$getOptionLabel(option)))\n\t\t};\n\t});\nvar $elm$core$List$sum = function (numbers) {\n\treturn A3($elm$core$List$foldl, $elm$core$Basics$add, 0, numbers);\n};\nvar $author$project$SearchString$toString = function (_v0) {\n\tvar str = _v0.a;\n\treturn str;\n};\nvar $elm_community$list_extra$List$Extra$indexedFoldl = F3(\n\tfunction (func, acc, list) {\n\t\tvar step = F2(\n\t\t\tfunction (x, _v0) {\n\t\t\t\tvar i = _v0.a;\n\t\t\t\tvar thisAcc = _v0.b;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\ti + 1,\n\t\t\t\t\tA3(func, i, x, thisAcc));\n\t\t\t});\n\t\treturn A3(\n\t\t\t$elm$core$List$foldl,\n\t\t\tstep,\n\t\t\t_Utils_Tuple2(0, acc),\n\t\t\tlist).b;\n\t});\nvar $mhoare$elm_stack$Stack$Stack = function (a) {\n\treturn {$: 'Stack', a: a};\n};\nvar $mhoare$elm_stack$Stack$initialise = $mhoare$elm_stack$Stack$Stack(_List_Nil);\nvar $elm$core$String$foldr = _String_foldr;\nvar $elm$core$String$toList = function (string) {\n\treturn A3($elm$core$String$foldr, $elm$core$List$cons, _List_Nil, string);\n};\nvar $elm$core$List$append = F2(\n\tfunction (xs, ys) {\n\t\tif (!ys.b) {\n\t\t\treturn xs;\n\t\t} else {\n\t\t\treturn A3($elm$core$List$foldr, $elm$core$List$cons, ys, xs);\n\t\t}\n\t});\nvar $elm$core$String$fromList = _String_fromList;\nvar $author$project$OptionPresentor$indexInsideMatch = F2(\n\tfunction (result, index) {\n\t\treturn !$elm$core$List$isEmpty(\n\t\t\tA2(\n\t\t\t\t$elm$core$List$filter,\n\t\t\t\tfunction (match) {\n\t\t\t\t\tvar matchIndex = index - match.offset;\n\t\t\t\t\treturn A2($elm$core$List$member, matchIndex, match.keys);\n\t\t\t\t},\n\t\t\t\tresult.matches));\n\t});\nvar $zwilias$elm_utf_tools$String$UTF32$foldl = F3(\n\tfunction (op, initial, input) {\n\t\treturn A3(\n\t\t\t$elm$core$String$foldl,\n\t\t\tF2(\n\t\t\t\tfunction (c, acc) {\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\top,\n\t\t\t\t\t\t$elm$core$Char$toCode(c),\n\t\t\t\t\t\tacc);\n\t\t\t\t}),\n\t\t\tinitial,\n\t\t\tinput);\n\t});\nvar $zwilias$elm_utf_tools$String$UTF32$length = function (input) {\n\treturn A3(\n\t\t$zwilias$elm_utf_tools$String$UTF32$foldl,\n\t\tF2(\n\t\t\tfunction (_v0, acc) {\n\t\t\t\treturn acc + 1;\n\t\t\t}),\n\t\t0,\n\t\tinput);\n};\nvar $mhoare$elm_stack$Stack$push = F2(\n\tfunction (item, _v0) {\n\t\tvar stack = _v0.a;\n\t\treturn $mhoare$elm_stack$Stack$Stack(\n\t\t\tA2($elm$core$List$cons, item, stack));\n\t});\nvar $mhoare$elm_stack$Stack$toList = function (_v0) {\n\tvar stack = _v0.a;\n\treturn stack;\n};\nvar $mhoare$elm_stack$Stack$top = function (_v0) {\n\tvar stack = _v0.a;\n\treturn $elm$core$List$head(stack);\n};\nvar $author$project$OptionPresentor$tokenizeHelper = F3(\n\tfunction (index, _char, highlightResult) {\n\t\tvar theEnd = _Utils_eq(\n\t\t\tindex,\n\t\t\t$zwilias$elm_utf_tools$String$UTF32$length(highlightResult.hay) - 1);\n\t\tif (A2($author$project$OptionPresentor$indexInsideMatch, highlightResult.result, index)) {\n\t\t\tvar _v0 = $mhoare$elm_stack$Stack$top(highlightResult.plainStack);\n\t\t\tif (_v0.$ === 'Just') {\n\t\t\t\tif (theEnd) {\n\t\t\t\t\tvar prevText = _Utils_Tuple2(\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t$elm$core$String$fromList(\n\t\t\t\t\t\t\t$elm$core$List$reverse(\n\t\t\t\t\t\t\t\t$mhoare$elm_stack$Stack$toList(highlightResult.plainStack))));\n\t\t\t\t\treturn _Utils_update(\n\t\t\t\t\t\thighlightResult,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttextTokens: A2(\n\t\t\t\t\t\t\t\t$elm$core$List$append,\n\t\t\t\t\t\t\t\thighlightResult.textTokens,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tprevText,\n\t\t\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\t\t\t$elm$core$String$fromChar(_char))\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tvar prevText = _Utils_Tuple2(\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t$elm$core$String$fromList(\n\t\t\t\t\t\t\t$elm$core$List$reverse(\n\t\t\t\t\t\t\t\t$mhoare$elm_stack$Stack$toList(highlightResult.plainStack))));\n\t\t\t\t\treturn _Utils_update(\n\t\t\t\t\t\thighlightResult,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\thighlightStack: A2($mhoare$elm_stack$Stack$push, _char, highlightResult.highlightStack),\n\t\t\t\t\t\t\tplainStack: $mhoare$elm_stack$Stack$initialise,\n\t\t\t\t\t\t\ttextTokens: A2(\n\t\t\t\t\t\t\t\t$elm$core$List$append,\n\t\t\t\t\t\t\t\thighlightResult.textTokens,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[prevText]))\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (theEnd) {\n\t\t\t\t\tvar currentHighlight = _Utils_Tuple2(\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t$elm$core$String$fromList(\n\t\t\t\t\t\t\t$elm$core$List$reverse(\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t$elm$core$List$append,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[_char]),\n\t\t\t\t\t\t\t\t\t$mhoare$elm_stack$Stack$toList(highlightResult.highlightStack)))));\n\t\t\t\t\treturn _Utils_update(\n\t\t\t\t\t\thighlightResult,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\thighlightStack: $mhoare$elm_stack$Stack$initialise,\n\t\t\t\t\t\t\ttextTokens: A2(\n\t\t\t\t\t\t\t\t$elm$core$List$append,\n\t\t\t\t\t\t\t\thighlightResult.textTokens,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[currentHighlight]))\n\t\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_update(\n\t\t\t\t\t\thighlightResult,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\thighlightStack: A2($mhoare$elm_stack$Stack$push, _char, highlightResult.highlightStack)\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tvar _v1 = $mhoare$elm_stack$Stack$top(highlightResult.highlightStack);\n\t\t\tif (_v1.$ === 'Just') {\n\t\t\t\tif (theEnd) {\n\t\t\t\t\tvar prevHighlight = _Utils_Tuple2(\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t$elm$core$String$fromList(\n\t\t\t\t\t\t\t$elm$core$List$reverse(\n\t\t\t\t\t\t\t\t$mhoare$elm_stack$Stack$toList(highlightResult.highlightStack))));\n\t\t\t\t\treturn _Utils_update(\n\t\t\t\t\t\thighlightResult,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttextTokens: A2(\n\t\t\t\t\t\t\t\t$elm$core$List$append,\n\t\t\t\t\t\t\t\thighlightResult.textTokens,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tprevHighlight,\n\t\t\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\t\t\t$elm$core$String$fromChar(_char))\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tvar prevHighlight = _Utils_Tuple2(\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t$elm$core$String$fromList(\n\t\t\t\t\t\t\t$elm$core$List$reverse(\n\t\t\t\t\t\t\t\t$mhoare$elm_stack$Stack$toList(highlightResult.highlightStack))));\n\t\t\t\t\treturn _Utils_update(\n\t\t\t\t\t\thighlightResult,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\thighlightStack: $mhoare$elm_stack$Stack$initialise,\n\t\t\t\t\t\t\tplainStack: A2($mhoare$elm_stack$Stack$push, _char, highlightResult.plainStack),\n\t\t\t\t\t\t\ttextTokens: A2(\n\t\t\t\t\t\t\t\t$elm$core$List$append,\n\t\t\t\t\t\t\t\thighlightResult.textTokens,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[prevHighlight]))\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (theEnd) {\n\t\t\t\t\tvar prevText = _Utils_Tuple2(\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t$elm$core$String$fromList(\n\t\t\t\t\t\t\t$elm$core$List$reverse(\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t$elm$core$List$append,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[_char]),\n\t\t\t\t\t\t\t\t\t$mhoare$elm_stack$Stack$toList(highlightResult.plainStack)))));\n\t\t\t\t\treturn _Utils_update(\n\t\t\t\t\t\thighlightResult,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tplainStack: $mhoare$elm_stack$Stack$initialise,\n\t\t\t\t\t\t\ttextTokens: A2(\n\t\t\t\t\t\t\t\t$elm$core$List$append,\n\t\t\t\t\t\t\t\thighlightResult.textTokens,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[prevText]))\n\t\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_update(\n\t\t\t\t\t\thighlightResult,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\thighlightStack: $mhoare$elm_stack$Stack$initialise,\n\t\t\t\t\t\t\tplainStack: A2($mhoare$elm_stack$Stack$push, _char, highlightResult.plainStack)\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar $author$project$OptionPresentor$tokenize = F2(\n\tfunction (hay, result) {\n\t\treturn A3(\n\t\t\t$elm_community$list_extra$List$Extra$indexedFoldl,\n\t\t\t$author$project$OptionPresentor$tokenizeHelper,\n\t\t\t{hay: hay, highlightStack: $mhoare$elm_stack$Stack$initialise, plainStack: $mhoare$elm_stack$Stack$initialise, result: result, textTokens: _List_Nil},\n\t\t\t$elm$core$String$toList(hay)).textTokens;\n\t});\nvar $author$project$OptionSearcher$updateSearchResultInOption = F2(\n\tfunction (searchString, option) {\n\t\tvar trimmedSearchString = $elm$core$String$trim(\n\t\t\t$author$project$SearchString$toString(searchString));\n\t\tvar searchResult = A2($author$project$OptionSearcher$search, trimmedSearchString, option);\n\t\tvar totalScore = $elm$core$List$sum(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tsearchResult.labelMatch.score,\n\t\t\t\t\t$author$project$OptionSearchFilter$descriptionHandicap(searchResult.descriptionMatch.score),\n\t\t\t\t\t$author$project$OptionSearchFilter$groupHandicap(searchResult.groupMatch.score)\n\t\t\t\t]));\n\t\tvar labelTokens = A2(\n\t\t\t$author$project$OptionPresentor$tokenize,\n\t\t\t$author$project$OptionLabel$optionLabelToString(\n\t\t\t\t$author$project$Option$getOptionLabel(option)),\n\t\t\tsearchResult.labelMatch);\n\t\tvar groupTokens = A2(\n\t\t\t$author$project$OptionPresentor$tokenize,\n\t\t\t$author$project$OptionGroup$toSearchString(\n\t\t\t\t$author$project$Option$getOptionGroup(option)),\n\t\t\tsearchResult.groupMatch);\n\t\tvar descriptionTokens = A2(\n\t\t\t$author$project$OptionPresentor$tokenize,\n\t\t\t$author$project$OptionDescription$toSearchString(\n\t\t\t\t$author$project$Option$getDescription(option)),\n\t\t\tsearchResult.descriptionMatch);\n\t\tvar bestScore = A2(\n\t\t\t$elm$core$Maybe$withDefault,\n\t\t\t$author$project$OptionSearchFilter$impossiblyLowScore,\n\t\t\t$elm$core$List$minimum(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tsearchResult.labelMatch.score,\n\t\t\t\t\t\t$author$project$OptionSearchFilter$descriptionHandicap(searchResult.descriptionMatch.score),\n\t\t\t\t\t\t$author$project$OptionSearchFilter$groupHandicap(searchResult.groupMatch.score)\n\t\t\t\t\t])));\n\t\tvar cappedBestScore = (bestScore > 100) ? (A2(\n\t\t\t$elm$core$String$contains,\n\t\t\t$elm$core$String$toLower(\n\t\t\t\t$author$project$SearchString$toString(searchString)),\n\t\t\t$elm$core$String$toLower(\n\t\t\t\t$author$project$OptionLabel$optionLabelToSearchString(\n\t\t\t\t\t$author$project$Option$getOptionLabel(option)))) ? (($elm$core$String$length(\n\t\t\t$author$project$SearchString$toString(searchString)) < 2) ? bestScore : (($elm$core$String$length(\n\t\t\t$author$project$SearchString$toString(searchString)) < 3) ? 50 : (($elm$core$String$length(\n\t\t\t$author$project$SearchString$toString(searchString)) < 4) ? 20 : (($elm$core$String$length(\n\t\t\t$author$project$SearchString$toString(searchString)) < 5) ? 15 : (($elm$core$String$length(\n\t\t\t$author$project$SearchString$toString(searchString)) < 6) ? 10 : (($elm$core$String$length(\n\t\t\t$author$project$SearchString$toString(searchString)) >= 6) ? 10 : bestScore)))))) : bestScore) : bestScore;\n\t\treturn A2(\n\t\t\t$author$project$Option$setOptionSearchFilter,\n\t\t\t$elm$core$Maybe$Just(\n\t\t\t\tA5($author$project$OptionSearchFilter$new, totalScore, cappedBestScore, labelTokens, descriptionTokens, groupTokens)),\n\t\t\toption);\n\t});\nvar $author$project$OptionSearcher$updateOptionsWithSearchString = F3(\n\tfunction (searchString, searchStringMinimumLength, optionList) {\n\t\tvar doOptionFiltering = function () {\n\t\t\tif (searchStringMinimumLength.$ === 'FixedSearchStringMinimumLength') {\n\t\t\t\tvar positiveInt = searchStringMinimumLength.a;\n\t\t\t\treturn A2(\n\t\t\t\t\t$author$project$PositiveInt$lessThanOrEqualTo,\n\t\t\t\t\tpositiveInt,\n\t\t\t\t\t$author$project$SearchString$length(searchString));\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}();\n\t\treturn doOptionFiltering ? A2(\n\t\t\t$author$project$OptionList$map,\n\t\t\t$author$project$OptionSearcher$updateSearchResultInOption(searchString),\n\t\t\toptionList) : A2(\n\t\t\t$author$project$OptionList$map,\n\t\t\tfunction (option) {\n\t\t\t\treturn A2($author$project$Option$setOptionSearchFilter, $elm$core$Maybe$Nothing, option);\n\t\t\t},\n\t\t\toptionList);\n\t});\nvar $author$project$FilterWorker$update = F2(\n\tfunction (msg, options) {\n\t\tif (msg.$ === 'UpdateOptions') {\n\t\t\tvar optionsJson = msg.a;\n\t\t\tvar _v1 = A2(\n\t\t\t\t$elm$json$Json$Decode$decodeValue,\n\t\t\t\t$author$project$OptionList$decoder($author$project$SelectionMode$CustomHtml),\n\t\t\t\toptionsJson);\n\t\t\tif (_v1.$ === 'Ok') {\n\t\t\t\tvar newOptions = _v1.a;\n\t\t\t\treturn _Utils_Tuple2(newOptions, $elm$core$Platform$Cmd$none);\n\t\t\t} else {\n\t\t\t\tvar error = _v1.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t$author$project$OptionList$FancyOptionList(_List_Nil),\n\t\t\t\t\t$author$project$FilterWorker$sendErrorMessage(\n\t\t\t\t\t\t$elm$json$Json$Decode$errorToString(error)));\n\t\t\t}\n\t\t} else {\n\t\t\tvar jsonSearchParams = msg.a;\n\t\t\tvar _v2 = A2($elm$json$Json$Decode$decodeValue, $author$project$OptionSearcher$decodeSearchParams, jsonSearchParams);\n\t\t\tif (_v2.$ === 'Ok') {\n\t\t\t\tvar searchParams = _v2.a;\n\t\t\t\tvar newOptions = A3($author$project$OptionSearcher$updateOptionsWithSearchString, searchParams.searchString, searchParams.searchStringMinimumLength, options);\n\t\t\t\tvar optionsToSend = A2(\n\t\t\t\t\t$author$project$OptionList$take,\n\t\t\t\t\t100,\n\t\t\t\t\t$author$project$DropdownOptions$filterOptionsToShowInDropdownBySearchScore(newOptions));\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tnewOptions,\n\t\t\t\t\t$author$project$FilterWorker$sendSearchResults(\n\t\t\t\t\t\tA3($author$project$OptionList$encodeSearchResults, optionsToSend, searchParams.searchNonce, searchParams.clearingSearch)));\n\t\t\t} else {\n\t\t\t\tvar error = _v2.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\toptions,\n\t\t\t\t\t$author$project$FilterWorker$sendErrorMessage(\n\t\t\t\t\t\t$elm$json$Json$Decode$errorToString(error)));\n\t\t\t}\n\t\t}\n\t});\nvar $elm$core$Platform$worker = _Platform_worker;\nvar $author$project$FilterWorker$main = $elm$core$Platform$worker(\n\t{init: $author$project$FilterWorker$init, subscriptions: $author$project$FilterWorker$subscriptions, update: $author$project$FilterWorker$update});\n_Platform_export({'FilterWorker':{'init':$author$project$FilterWorker$main(\n\t$elm$json$Json$Decode$succeed(_Utils_Tuple0))(0)}});}(this));\n\n// eslint-disable-next-line no-undef\nconst app = Elm.FilterWorker.init();\n\nonmessage = ({ data }) => {\n  const { portName, jsonBlob } = data;\n\n  if (portName === "receiveOptions") {\n    app.ports.receiveOptions.send(jsonBlob);\n  } else if (portName === "receiveSearchString") {\n    app.ports.receiveSearchString.send(jsonBlob);\n  }\n};\n\napp.ports.sendSearchResults.subscribe((searchResultData) => {\n  postMessage({\n    messageName: "searchResults",\n    searchResultData,\n  });\n});\n\napp.ports.sendErrorMessage.subscribe((errorMessage) => {\n  postMessage({\n    messageName: "errorMessage",\n    errorMessage,\n  });\n});\n
      </script>
    </div>
  `;
  return templateTag;
};

export default getMuchSelectTemplate;